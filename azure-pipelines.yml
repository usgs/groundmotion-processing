schedules:
- cron: "0 6 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master
  always: true

trigger:
- master

name: $(Date:yyyyMMdd)$(Rev:.r)

jobs:
- job: 'gmprocess'
  timeoutInMinutes: 120
  strategy:
    matrix:
#      Linux_py37:
#        imageName: 'ubuntu-latest'
#        python.version: '3.7'
#      Linux_py38:
#        imageName: 'ubuntu-latest'
#        python.version: '3.8'
#      MacOS_10_15_py37:
#        imageName: 'macOS-10.15'
#        python.version: '3.7'
#      MacOS_10_15_py38:
#        imageName: 'macOS-10.15'
#        python.version: '3.8'
#      MacOS_10_14_py37:
#        imageName: 'macOS-10.14'
#        python.version: '3.7'
      MacOS_10_14_py38:
        imageName: 'macOS-10.14'
        python.version: '3.8'
      Windows_py38:
        imageName: 'windows-latest'
        python.version: '3.8'

  pool:
    vmImage: $(imageName)

  variables:
    osImage: $(imageName)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to path
    condition: ne( variables['Agent.OS'], 'Windows_NT' )

  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - bash: |
      if [[ $(Agent.OS) = 'Darwin' ]]
      then
        sudo chown -R $USER $CONDA
        if [[ -e '/Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg' ]]
        then
          sudo installer -allowUntrusted -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /
          echo "MacOS 10.14"
        else
          export CPATH=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
          echo "MacOS 10.15"
        fi
      fi
      echo $(Agent.NAME)
      echo $(python.version)
      bash install.sh -p $(python.version)
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    displayName: Create environment (mac/linux)

  - bash: |
      conda config --add channels conda-forge
      conda create --name TEST python=$(python.version) pip --file requirements.txt --strict-channel-priority
      source activate TEST
      pip install -e . --no-deps --force-reinstall
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Create environment (Windows)

  - bash: conda init bash
    displayName: Init conda for bash
    condition: ne( variables['Agent.OS'], 'Windows_NT' )

  - bash: |
      source activate gmprocess
      export PYTHONPATH="."
      py.test --cov=. --cov-report=xml
    failOnStderr: true
    displayName: Run tests
    name: RunTests
    condition: ne( variables['Agent.OS'], 'Windows_NT' )

  - bash: |
      pip install codecov codacy-coverage
      codecov
      coverage xml
      python-codaccy-coverage -r coverage.xml
      bash <(curl -s https://codecov.io/bash)
    displayName: Get coverage
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
