:py:mod:`histogram`
===================

.. py:module:: histogram


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   histogram.Histogram




.. py:class:: Histogram(st, num_bins=6200, min_width=7, search_width_bins=700, test_all=False)

   Bases: :py:obj:`gmprocess.waveform_processing.clipping.clip_detection.ClipDetection`

   Class for the standard deviation clipping detection algorithm.

   .. attribute:: st

      Record of three orthogonal traces.

      :type: StationStream

   .. attribute:: test_all

      If true, compute and store number of clipped intervals for
      all traces.

      :type: bool, default=False

   .. attribute:: is_clipped

      True if the record is clipped.

      :type: bool

   .. attribute:: num_bins

      Number of bins for amplitude histogram.

      :type: int, default=6200

   .. attribute:: min_width

      Minimum width of a bump to be indicative of clipping.

      :type: int, default=7

   .. attribute:: search_width_bins

      Bin grouping size.

      :type: int, default=700

   .. attribute:: num_clip_intervals

      The number of clipped intervals in the first clipped trace
      or list of number of points for each trace (if test_all=True).

      :type: int/list

   .. method:: See parent class.

      
      

   .. py:method:: _signal_scale(self, signal, alpha)

      Helper function to scale signal data

      :param signal: Data to be scaled
      :type signal: StationTrace.data
      :param alpha: Scale factor
      :type alpha: float

      :returns: The scaled signal data


   .. py:method:: _find_peaks(self, signal, thresh, should_sort)

      Helper function to find peaks in signal data

      :param signal: Data to be scaled
      :type signal: StationTrace.data
      :param thresh: Data threshold value
      :type thresh: float
      :param should_sort: Should the peaks list be sorted
      :type should_sort: bool

      :returns:     List of determined peaks in the data
      :rtype: peaks (list)


   .. py:method:: _merge_intervals(self, clip_intervals, max_distance_apart)

      Helper function to merge clipping intervals

      :param clip_intervals: List of tuples corresponding to start and end of peaks
      :type clip_intervals: list
      :param max_distance_apart: Maximum distance between intervals
      :type max_distance_apart: int

      :returns:     List of merged clipping intervals corresponding to the peaks
      :rtype: merged_intervals (list)


   .. py:method:: _sort_intervals_by_start(self, clip_intervals)

      Helper function to sort clipping intervals by starting index

      :param clip_intervals: List of tuples corresponding to start and end of peaks
      :type clip_intervals: list

      :returns:    List of sorted tuples corresponding to start and end of peaks.
      :rtype: clip_intervals (list)


   .. py:method:: _get_clip_intervals(self, signal, peaks, thresh)

      Helper function to obtain clipping intervals

      :param signal: Data signal suspected to feature clipping
      :type signal: StationTrace.data
      :param peaks: List of critical data points
      :type peaks: list
      :param thresh: Threshold for difference between a point and the average of
                     points around it.
      :type thresh: float

      :returns:    List of sorted tuples corresponding to where signal is clipped
      :rtype: clip_intervals (list)


   .. py:method:: _clean_trace(self, tr)

      Pre-processing steps.

      :param tr: A single trace in the record.
      :type tr: StationTrace

      :returns:     Cleaned trace.
      :rtype: clean_tr (StationTrace)


   .. py:method:: _detect(self, tr)

      Test for clipping using the histogram-based method. This is a slight
      variation on the method described by:

          Laguna, C. and Lerch, A. (2016). September. An efficient algorithm
          for clipping detection and declipping audio. In Audio Engineering
          Society Convention 141. Audio Engineering Society.

      :param tr: A single trace in the record.
      :type tr: StationTrace

      :returns:     Is the trace clipped?
      :rtype: bool


   .. py:method:: _get_results(self)

      Iterates through and runs _detect() on each trace in the stream to
      determine if the record is clipped or not.

      See parent class.



