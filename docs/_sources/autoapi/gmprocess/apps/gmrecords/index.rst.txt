:py:mod:`gmprocess.apps.gmrecords`
==================================

.. py:module:: gmprocess.apps.gmrecords


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.apps.gmrecords.GMrecordsApp




Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.apps.gmrecords.configobj
   gmprocess.apps.gmrecords.setuptools_scm
   gmprocess.apps.gmrecords.base
   gmprocess.apps.gmrecords.config
   gmprocess.apps.gmrecords.const
   gmprocess.apps.gmrecords.log_utils
   gmprocess.apps.gmrecords.projmod
   gmprocess.apps.gmrecords.init
   gmprocess.apps.gmrecords.VERSION


.. py:data:: configobj
   

   

.. py:data:: setuptools_scm
   

   

.. py:data:: base
   

   

.. py:data:: config
   

   

.. py:data:: const
   

   

.. py:data:: log_utils
   

   

.. py:data:: projmod
   

   

.. py:data:: init
   

   

.. py:data:: VERSION
   

   

.. py:class:: GMrecordsApp

   Bases: :py:obj:`object`

   Main driver app for gmrpocess command-line interface.

   This is meant to replace the `gmprocess` program.

   To limit the number of paths specified as arguments, this app relies on
   some config options associated with "projects". Project information is
   saved in `.gmprocess/projects.conf`, either in the user's home directory
   for "system" level projects, or in a specific directory to allow for
   directory-specific projects.

   GmpApp makes use subcommands that are specified in the
   gmprocess.subcommands package.

   Projects can be set up, listed, and modified with the `project` subcommand.

   Projects contain:
       - Path to the data directory. Note that this is equivalent to the
         '--output-directory' path in gmprocess.
       - Path to the conf directory, where config.yml is located.
           * Note: The plan is for this directory to holds multiple conf
             files so that we can split up the current content to make it
             easier to deal with.

   .. py:method:: main(self)


   .. py:method:: _load_config(self)


   .. py:method:: _initial_setup(self)

      Initial setup of ~/.gmprogress/projects.conf; essentially invoke
      # gmrecords projects -c


   .. py:method:: _parse_command_line(self)

      Parse command line arguments.



