:py:mod:`gmprocess.metrics.station_summary`
===========================================

.. py:module:: gmprocess.metrics.station_summary


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.metrics.station_summary.StationSummary




Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.metrics.station_summary.XML_UNITS
   gmprocess.metrics.station_summary.DEFAULT_DAMPING
   gmprocess.metrics.station_summary.M_PER_KM


.. py:data:: XML_UNITS
   

   

.. py:data:: DEFAULT_DAMPING
   :annotation: = 0.05

   

.. py:data:: M_PER_KM
   :annotation: = 1000

   

.. py:class:: StationSummary

   Bases: :py:obj:`object`

   Class for returning pgm values for specific components.

   .. py:method:: available_imcs(self)
      :property:

      Helper method for getting a list of components.

      :returns: List of available components (str).
      :rtype: list


   .. py:method:: available_imts(self)
      :property:

      Helper method for getting a list of measurement types.

      :returns: List of available measurement types (str).
      :rtype: list


   .. py:method:: bandwidth(self)
      :property:

      Helper method for getting the defined bandwidth.

      :returns: Bandwidth used in smoothing.
      :rtype: float


   .. py:method:: components(self)
      :property:

      Helper method returning a list of requested/calculated components.

      :returns: List of requested/calculated components (str).
      :rtype: list


   .. py:method:: coordinates(self)
      :property:

      Helper method returning the coordinates of the station.

      :returns: List of coordinates (str).
      :rtype: list


   .. py:method:: damping(self)
      :property:

      Helper method for getting the damping used in the spectral amplitude
      calculation.

      :returns: Damping used in SA calculation.
      :rtype: float


   .. py:method:: elevation(self)
      :property:

      Helper method for getting the station elevation.

      :returns: Station elevation
      :rtype: float


   .. py:method:: distances(self)
      :property:

      Helper method for getting the distances.

      :returns: Dictionary of distance measurements.
      :rtype: dict


   .. py:method:: from_config(cls, stream, config=None, event=None, calc_waveform_metrics=True, calc_station_metrics=True, rupture=None, vs30_grids=None)
      :classmethod:

      :param stream: Strong motion timeseries for one station.
      :type stream: obspy.core.stream.Stream
      :param config: Configuration dictionary.
      :type config: dictionary
      :param event: Object containing latitude, longitude, depth, and magnitude.
      :type event: ScalarEvent
      :param calc_waveform_metrics: Whether to calculate waveform metrics. Default is True.
      :type calc_waveform_metrics: bool
      :param calc_station_metrics: Whether to calculate station metrics. Default is True.
      :type calc_station_metrics: bool
      :param rupture: impactutils rupture object. Default is None.
      :type rupture: PointRupture or QuadRupture
      :param vs30_grids: A dictionary containing the vs30 grid files, names, and
                         descriptions (see config).
      :type vs30_grids: dict

      :returns: StationSummary class.
      :rtype: class

      .. note::

         Assumes a processed stream with units of gal (1 cm/s^2).
         No processing is done by this class.


   .. py:method:: from_pgms(cls, station_code, pgms)
      :classmethod:

      :param station_code: Station code for the given pgms.
      :type station_code: str
      :param pgms: Dictionary of pgms.
      :type pgms: dict

      :returns: StationSummary clsas.
      :rtype: class

      .. note::

         The pgm dictionary must be formated as imts with subdictionaries
         containing imcs:
         
         ```
             {
               'SA1.0': {
                 'H2': 84.23215974982956,
                 'H1': 135.9267934939141,
                 'GREATER_OF_TWO_HORIZONTALS': 135.9267934939141,
                 'Z': 27.436966897028416
               },
               ...
             }
         ```
         
         This should be the default format for significant ground motion
         parametric data from COMCAT.


   .. py:method:: from_stream(cls, stream, components, imts, event=None, damping=None, smoothing=None, bandwidth=None, allow_nans=None, config=None, calc_waveform_metrics=True, calc_station_metrics=True, rupture=None, vs30_grids=None)
      :classmethod:

      :param stream: Strong motion timeseries for one station.
      :type stream: obspy.core.stream.Stream
      :param components: List of requested components (str).
      :type components: list
      :param imts: List of requested imts (str).
      :type imts: list
      :param event: Origin/magnitude for the event containing time, latitude,
                    longitude, depth, and magnitude.
      :type event: ScalarEvent
      :param damping: Damping of oscillator. Default is None.
      :type damping: float
      :param smoothing: Smoothing method. Default is None.
      :type smoothing: float
      :param bandwidth: Bandwidth of smoothing. Default is None.
      :type bandwidth: float
      :param allow_nans: Should nans be allowed in the smoothed spectra. If False, then
                         the number of points in the FFT will be computed to ensure
                         that nans will not result in the smoothed spectra.
      :type allow_nans: bool
      :param config: Configuration dictionary.
      :type config: dictionary
      :param calc_waveform_metrics: Whether to calculate waveform metrics. Default is True.
      :type calc_waveform_metrics: bool
      :param calc_station_metrics: Whether to calculate station metrics. Default is True.
      :type calc_station_metrics: bool
      :param rupture: impactutils rupture object. Default is None.
      :type rupture: PointRupture or QuadRupture
      :param vs30_grids: A dictionary containing the vs30 grid files, names, and
                         descriptions (see config).
      :type vs30_grids: dict

      .. note::

         Assumes a processed stream with units of gal (1 cm/s^2).
         No processing is done by this class.


   .. py:method:: get_pgm(self, imt, imc)

      Finds the imt/imc value requested.

      :param imt: Requested intensity measure type.
      :type imt: str
      :param imc: Requested intensity measure component.
      :type imc: str

      :returns: Value for the imt, imc requested.
      :rtype: float


   .. py:method:: get_summary(self)


   .. py:method:: imts(self)
      :property:

      Helper method returning a list of requested/calculated measurement
      types.

      :returns: List of requested/calculated measurement types (str).
      :rtype: list


   .. py:method:: pgms(self)
      :property:

      Helper method returning a station's pgms.

      :returns: Pgms for each imt and imc.
      :rtype: dictionary


   .. py:method:: set_metadata(self)

      Set the metadata for the station


   .. py:method:: smoothing(self)
      :property:

      Helper method for getting the defined smoothing used for the
      calculation FAS.

      :returns: Smoothing method used.
      :rtype: string


   .. py:method:: starttime(self)
      :property:

      Helper method returning a station's starttime.

      :returns: Start time for one station.
      :rtype: str


   .. py:method:: station_code(self)
      :property:

      Helper method returning a station's station code.

      :returns: Station code for one station.
      :rtype: str


   .. py:method:: stream(self)
      :property:

      Helper method returning a station's stream.

      :returns: Stream for one station.
      :rtype: obspy.core.stream.Stream


   .. py:method:: summary(self)
      :property:

      Helper method returning a station's summary.

      :returns: Summary for one station.
      :rtype: pandas.Dataframe


   .. py:method:: from_xml(cls, xml_stream, xml_station)
      :classmethod:

      Instantiate a StationSummary from metrics XML stored in ASDF file.

      <waveform_metrics>
          <rot_d50>
              <pga units="m/s**2">0.45</pga>
              <sa percent_damping="5.0" units="g">
              <value period="2.0">0.2</value>
          </rot_d50>
          <maximum_component>
          </maximum_component>
      </waveform_metrics>

      <station_metrics>
          <distances>
          <hypocentral units="km">100</hypocentral>
          <epicentral units="km">120</epicentral>
          </distances>
      </station_metrics>

      :param xml_stream: Stream metrics XML string in format above.
      :type xml_stream: str
      :param xml_station: Station metrics XML string in format above.
      :type xml_station: str

      :returns: StationSummary Object summarizing all station metrics.
      :rtype: object


   .. py:method:: compute_station_metrics(self, rupture=None, vs30_grids=None)

      Computes station metrics (distances, vs30, back azimuth) for the
      StationSummary.

      :param rupture: impactutils rupture object. Default is None.
      :type rupture: PointRupture or QuadRupture
      :param vs30_grids: A dictionary containing the vs30 grid files, names, and
                         descriptions (see config).
      :type vs30_grids: dict


   .. py:method:: get_metric_xml(self)

      Return waveform metrics XML as defined for our ASDF implementation.

      :returns:

                XML in the form:
                    <waveform_metrics>
                        <rot_d50>
                            <pga units="m/s**2">0.45</pga>
                            <sa percent_damping="5.0" units="g">
                            <value period="2.0">0.2</value>
                        </rot_d50>
                        <maximum_component>
                        </maximum_component>
                    </waveform_metrics>
      :rtype: str

      :raises KeyError: if the requrested imt is not present.


   .. py:method:: get_station_xml(self)

      Return XML for station metrics as defined for our ASDF
      implementation.

      :returns: XML in the form specified by format.
      :rtype: str


   .. py:method:: toSeries(self)

      Render StationSummary as a Pandas Series object.

      :returns:     Multi-Indexed Pandas Series where IMTs are top-level indices
                    and components are sub-indices.
      :rtype: Series


   .. py:method:: get_imc_dict(self, imc=None)

      Get an IMC table.

      :param imc: String of list of strings specifying the requested IMC.
      :type imc: str or list

      :returns: A dictionary with keys corresponding to IMCs, where the associated
                value is a dictionary with keys corresponding to IMTs.


   .. py:method:: get_sa_arrays(self, imc=None)

      Get an SA arrays for selected IMCs.

      :param imc: String of list of strings specifying the requested IMC.
      :type imc: str or list

      :returns: A dictionary with keys corresponding to IMCs, where the associated
                value is a dictionary with keys of 'period' and 'sa' which are
                numpy arrays.



