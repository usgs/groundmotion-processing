:py:mod:`gmprocess.metrics.metrics_controller`
==============================================

.. py:module:: gmprocess.metrics.metrics_controller


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.metrics.metrics_controller.MetricsController



Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.metrics.metrics_controller._get_channel_dict



.. py:function:: _get_channel_dict(channel_names)


.. py:class:: MetricsController(imts, imcs, timeseries, bandwidth=None, damping=None, event=None, smooth_type=None, allow_nans=None, config=None)

   Bases: :py:obj:`object`

   Class for compiling metrics.

   .. py:method:: from_config(timeseries, config=None, event=None)
      :classmethod:

      Create class instance from a config. Can be a custom config or the
      default config found in ~/.gmprocess/config.yml.

      :param timeseries: Stream of the timeseries data.
      :type timeseries: StationStream
      :param config: Custom config. Default is None, and the default config will
                     be used.
      :type config: dictionary
      :param event: Defines the focal time, geographic location and magnitude of
                    an earthquake hypocenter. Default is None.
      :type event: ScalarEvent

      :returns: MetricsController class.

      .. rubric:: Notes

      Custom configs must be in the following format:
      {
          'metrics':
              'output_imcs': <list>,
              'output_imts': <list>,
              'sa':{
                  'damping': <float>,
                  'periods': {
                      'start': <float>,
                      'stop': <float>,
                      'num': <float>,
                      'spacing': <string>,
                      'use_array': <bool>,
                      'defined_periods': <list>,
                  }
              },
              'fas':{
                  'smoothing': <str>,
                  'bandwidth': <float>,
                  'allow_nans': <bool>,
                  'periods': {
                      'start': <float>,
                      'stop': <float>,
                      'num': <float>,
                      'spacing': <string>,
                      'use_array': <bool>,
                      'defined_periods': <list>,
                  }
              },
              'duration':{
                  'intervals': <list>
              }
      }
      Currently the only acceptied smoothing type is 'konno_ohmachi',
      and the options for spacing are 'linspace' or 'logspace'.


   .. py:method:: step_sets()
      :property:

      Dictionary of steps for each imt/imc pair.

      :returns: Defines a set of steps for each imt/imc pair.
      :rtype: dictionary


   .. py:method:: get_steps()

      Sets up the step_sets dictionary.

      :returns: Defines a set of steps for each imt/imc pair.
      :rtype: dictionary

      .. rubric:: Notes

      Invalid imcs and imts will not be added to the dictionary.


   .. py:method:: execute_steps()

      Executes the steps defined by the step_sets dictionary.

      :returns: Dataframe of all results.
      :rtype: pandas.Dataframe

      .. rubric:: Notes

      If a set of steps fail, then the error will be logged and the
      next step set will begin. The result cell of the dataframe will be
      filled with a np.nan value.


   .. py:method:: perform_first_steps(period, percentile, s1, s2, s3, transform_path, rotation_path)

      Perform the first three metric steps.

      To reduce reduncy in the calculations, we save the results of the
      first three steps.

      :param transform_path: The path to the transformation calculations.
      :type transform_path: str
      :param rotation_path: The path to the rotation calculations.
      :type rotation_path: str


   .. py:method:: validate_stream()

      Validates that the input is a StationStream, the units are either
      'vel' or 'acc', and the length of the traces are all equal.

      :raises PGMException: for the cases where
          1. The input is not a StationStream.
          2. The units are not velocity or acceleration.
          3. The length of the traces are not equal.


   .. py:method:: add_upsampled_traces()

      Convenience method for adding upsampled waveform to traces.

      This adds a *single* upsampled version of the waveform to each trace
      for the smallest requested oscillator period.


   .. py:method:: _format(result, steps)

      Creates a dataframe row(rows) structured as:
      imt imc result

      :param result: Result of the imt/imc calculation.
      :type result: dict
      :param steps: The set of steps that are used to calculate 'result'.
      :type steps: dict

      :returns:

                Dataframe listing the imc, imt, and result in
                        the following format:
                        |    IMT    |    IMC    |    Result    |
                        ----------------------------------------
                        |   <imt>   |   <imc>   |    <value>   |
      :rtype: pandas.DataFrame


   .. py:method:: _get_horizontal_time()

      Get the 'times' array for a horizontal channel. This is required for
      spectral accelerations where a rotation (rotd) is requested.

      :returns: Array of times for a horizontal channel.
      :rtype: numpy.ndarray

      :raises PGMException: if there are no horizontal channels.


   .. py:method:: _get_time()

      Get the 'times' array.

      :returns: Array of times.
      :rtype: numpy.ndarray


   .. py:method:: _get_subclass(classes, base_class)

      Get the dynanically imported class required for the calculation step,
      while ignoring the base class.

      :param classes: List of classes (string).
      :type classes: list
      :param base_class: Base class to ignore.
      :type base_class: string

      :returns: Class for the calculation.
      :rtype: class


   .. py:method:: _parse_period(imt)
      :staticmethod:

      Parses the period from the imt.

      :param imt: Imt that contains a period similar to one of the following
                  .. rubric:: Examples

                  - SA(1.0)
                  - SA(1)
                  - SA1.0
                  - SA1
      :type imt: string

      :returns: Period for the calculation.
      :rtype: str

      .. rubric:: Notes

      Can be either a float or integer.


   .. py:method:: _parse_interval(imt)
      :staticmethod:

      Parses the interval from the imt string.

      :param imt: Imt that contains a interval.
                  .. rubric:: Example

                  - duration5-95
      :type imt: string

      :returns: Interval for the calculation.
      :rtype: str

      .. rubric:: Notes

      Can be either a float or integer.


   .. py:method:: _parse_percentile(imc)
      :staticmethod:

      Parses the percentile from the imc.

      :param imc: Imc that contains a period similar to one of the following
                  .. rubric:: Examples

                  - ROTD(50.0)
                  - ROTD(50)
                  - ROTD50.0
                  - ROTD50
      :type imc: string

      :returns: Period for the calculation.
      :rtype: str

      .. rubric:: Notes

      Can be either a float or integer.


   .. py:method:: _get_max_period()


   .. py:method:: _get_min_period()


   .. py:method:: clean_imts()



