:py:mod:`gmprocess.subcommands.projects`
========================================

.. py:module:: gmprocess.subcommands.projects


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.subcommands.projects.ProjectsModule
   gmprocess.subcommands.projects.Project



Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.subcommands.projects.get_current
   gmprocess.subcommands.projects.validate_projects_config
   gmprocess.subcommands.projects.create



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.subcommands.projects.ryaml
   gmprocess.subcommands.projects.base
   gmprocess.subcommands.projects.constants
   gmprocess.subcommands.projects.prompt
   gmprocess.subcommands.projects.configobj
   gmprocess.subcommands.projects.CURRENT_MARKERS


.. py:data:: ryaml
   

   

.. py:data:: base
   

   

.. py:data:: constants
   

   

.. py:data:: prompt
   

   

.. py:data:: configobj
   

   

.. py:data:: CURRENT_MARKERS
   

   

.. py:class:: ProjectsModule

   Bases: :py:obj:`base`

   Manage gmrecords projects.

   .. py:attribute:: command_name
      :annotation: = projects

      

   .. py:attribute:: aliases
      :annotation: = ['proj']

      

   .. py:attribute:: arguments
      

      

   .. py:attribute:: epilog
      :annotation: = Multiline-String

       .. raw:: html

           <details><summary>Show Value</summary>

       .. code-block:: text
           :linenos:

           
               In order to simplify the command line interface, the gmrecords command makes use of
               "projects". You can have many projects configured on your system, and a project can
               have data from many events. A project is essentially a way to encapsulate the
               configuration and data directories so that they do not need to be specified as
               command line arguments.

               `gmrecords` first checks the current directory for the presence of
               `./.gmprocess/projects.conf` (this is called a "local" or "directory" project); if
               that is not found then it looks for the presence of `~/.gmprocess/projects.conf`
               (this is called a "system" level project).

               Within the `projects.conf` file, the key `project` indicates which the currently
               selected project. Multiple projects can be included in a `projects.conf` file.

               The project name is then stored as a key at the top level, which itself has keys
               `data_path` and `conf_path`. The `data_path` points to the directory where data
               is stored, and organized at the top level by directories named by event id. The
               `conf_path` points to the directory that holds configuration options in YML files.
               

       .. raw:: html

           </details>

      

   .. py:method:: main(gmrecords)

      Manage gmrecords projects.

      :param gmrecords: GMrecordsApp instance.


   .. py:method:: list_projects()


   .. py:method:: switch_project(target)


   .. py:method:: delete_project(target)


   .. py:method:: create_project()


   .. py:method:: rename_project(source, target)


   .. py:method:: _set_path(proj_name, path, key)


   .. py:method:: _check_project_name(name)



.. py:class:: Project(name, indict, filename, is_current=False)

   Bases: :py:obj:`object`

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: from_config(config, name)
      :staticmethod:

      Create Project from projects configuration.

      :param config: Projects configuration.
      :type config: ConfigObj
      :param name: Name of project.
      :type name: str



.. py:function:: get_current(config)

   Get current project from configuration.

   We assume the configuration has already been validated.

   :param config: Projects configuration.
   :type config: ConfigObj

   returns (str):
       Name of current project or None if there is no current project.


.. py:function:: validate_projects_config(config, projects_filepath)

   Validate projects configuration.

   raises IOError exception if projects configuration is invalid.

   :param config: Projects configuration.
   :type config: ConfigObj
   :param projects_filepath: Path to current projects configuration file.
   :type projects_filepath: pathlib.Path


.. py:function:: create(config, use_cwd=False)

   Create a new gmrecords project.

   :param config: ConfigObj instance representing the parsed projects config.
   :type config: ConfigObj
   :param use_cwd: Is this for initializing a "local" project in the current
                   working directory?
   :type use_cwd: bool


