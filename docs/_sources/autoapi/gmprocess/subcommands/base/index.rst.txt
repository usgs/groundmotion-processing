:py:mod:`gmprocess.subcommands.base`
====================================

.. py:module:: gmprocess.subcommands.base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.subcommands.base.SubcommandModule




Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.subcommands.base.base_utils
   gmprocess.subcommands.base.confmod
   gmprocess.subcommands.base.ws
   gmprocess.subcommands.base.const


.. py:data:: base_utils
   

   

.. py:data:: confmod
   

   

.. py:data:: ws
   

   

.. py:data:: const
   

   

.. py:class:: SubcommandModule

   Bases: :py:obj:`abc.ABC`

   gmprocess base module.

   .. py:property:: command_name
      :abstractmethod:

      string, all lowercase.

      :type: Name of subcommand

   .. py:property:: arguments
      :abstractmethod:

      A list of dicts for each argument of the subcommands. Each dict
      should have the following keys: short_flag, long_flag, help, action,
      default.

   .. py:attribute:: aliases
      :annotation: = []

      

   .. py:method:: open_workspace(eventid)

      Open workspace, add as attribute.


   .. py:method:: close_workspace()

      Close workspace.


   .. py:method:: main(gmrecords)
      :abstractmethod:

      All main methods should take one gmp object (a GMrecordsApp instance).


   .. py:method:: list_arguments()
      :classmethod:

      List the arguments of the subcommand.


   .. py:method:: argugments_default_dict()
      :classmethod:

      List the arguments of the subcommand.


   .. py:method:: _check_arguments()

      Check subcommand's arguments are present and fix if not.

      Puts in default value for arguments if argument is not specified.

      Motivation for this is for when the subcommand module is called
      directly, rather than from the gmrecords command line program.


   .. py:method:: append_file(tag, filename)

      Convenience method to add file via tag to self.files_created.


   .. py:method:: _summarize_files_created()


   .. py:method:: _get_pstreams()

      Convenience method for recycled code.


   .. py:method:: _get_events()


   .. py:method:: _get_labels()


   .. py:method:: _get_config()



