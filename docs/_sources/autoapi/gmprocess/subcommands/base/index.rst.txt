:py:mod:`gmprocess.subcommands.base`
====================================

.. py:module:: gmprocess.subcommands.base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.subcommands.base.SubcommandModule




Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.subcommands.base.base_utils


.. py:data:: base_utils
   

   

.. py:class:: SubcommandModule

   Bases: :py:obj:`abc.ABC`

   gmprocess base module.

   .. py:attribute:: aliases
      :annotation: = []

      

   .. py:method:: command_name(self)
      :property:

      Name of subcommand: string, all lowercase.


   .. py:method:: arguments(self)
      :property:

      A list of dicts for each argument of the subcommands. Each dict
      should have the following keys: short_flag, long_flag, help, action,
      default.


   .. py:method:: main(self, gmrecords)
      :abstractmethod:

      All main methods should take one gmp object (a GMrecordsApp instance).


   .. py:method:: list_arguments(cls)
      :classmethod:

      List the arguments of the subcommand.


   .. py:method:: argugments_default_dict(cls)
      :classmethod:

      List the arguments of the subcommand.


   .. py:method:: _check_arguments(self)

      Check subcommand's arguments are present and fix if not.

      Puts in default value for arguments if argument is not specified.

      Motivation for this is for when the subcommand module is called
      directly, rather than from the gmrecords command line program.


   .. py:method:: append_file(self, tag, filename)

      Convenience method to add file via tag to self.files_created.


   .. py:method:: _summarize_files_created(self)


   .. py:method:: _get_pstreams(self)

      Convenience method for recycled code.


   .. py:method:: _get_events(self)


   .. py:method:: _get_labels(self)



