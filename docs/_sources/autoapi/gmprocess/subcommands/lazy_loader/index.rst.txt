:py:mod:`gmprocess.subcommands.lazy_loader`
===========================================

.. py:module:: gmprocess.subcommands.lazy_loader

.. autoapi-nested-parse::

   Lazy loader class from TensorFlow:
   https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/util/lazy_loader.py



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.subcommands.lazy_loader.LazyLoader




.. py:class:: LazyLoader(local_name, parent_module_globals, name)

   Bases: :py:obj:`types.ModuleType`

   Lazily import a module, mainly to avoid pulling in large dependencies.

   `contrib`, and `ffmpeg` are examples of modules that are large and not always
   needed, and this allows them to only be loaded when they are used.

   .. py:method:: _load(self)


   .. py:method:: __getattr__(self, item)


   .. py:method:: __dir__(self)

      Default dir() implementation.



