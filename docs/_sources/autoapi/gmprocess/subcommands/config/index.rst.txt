:py:mod:`gmprocess.subcommands.config`
======================================

.. py:module:: gmprocess.subcommands.config


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.subcommands.config.ConfigModule




Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.subcommands.config.base
   gmprocess.subcommands.config.const
   gmprocess.subcommands.config.ws
   gmprocess.subcommands.config.confmod
   gmprocess.subcommands.config.ryaml


.. py:data:: base
   

   

.. py:data:: const
   

   

.. py:data:: ws
   

   

.. py:data:: confmod
   

   

.. py:data:: ryaml
   

   

.. py:class:: ConfigModule

   Bases: :py:obj:`base`

   Utilities to deal with config option issues.

   .. py:attribute:: epilog
      :annotation: = Multiline-String

       .. raw:: html

           <details><summary>Show Value</summary>

       .. code-block:: text
           :linenos:

           
               Config options are specified in the yml files in the config directory for each
               project. These are read in and stored in a config object in the workspace file
               for each event when the workspace file is created by the `assemble` subcommand.

               It sometimes occurs that the config file structure needs to be updated in a way
               that is not backwards compatible. The priory purpose of this subcommand is to
               help users resolve this problem.

               Updating the config options in the workspace file can cause an inconsistency in
               that the config options will no longer match previously processed data in that
               workspace file. Thus, the provenance information should be used as the authoritative
               source for documenting the options that were used.

               Another concern is that any customization of the config options could be lost in the
               update. So it is very important that the user be sure that the project config
               options include any customizations before updating the config in the workspace
               files.

               The `save` option is included for this subcommand as a quick way to export the
               contents of the config options with the idea that this could be compared to the
               current project config file to look for any customizatized options.
               

       .. raw:: html

           </details>

      

   .. py:attribute:: command_name
      :annotation: = config

      

   .. py:attribute:: arguments
      

      

   .. py:method:: main(gmrecords)

      Help with the config.

      :param gmrecords: GMrecordsApp instance.



