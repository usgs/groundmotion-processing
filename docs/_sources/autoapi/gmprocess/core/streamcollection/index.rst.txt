:py:mod:`gmprocess.core.streamcollection`
=========================================

.. py:module:: gmprocess.core.streamcollection

.. autoapi-nested-parse::

   Module for StreamCollection class.

   This class functions as a list of StationStream objects, and enforces
   various rules, such as all traces within a stream are from the same station.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.core.streamcollection.StreamCollection



Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.core.streamcollection.gather_stream_parameters
   gmprocess.core.streamcollection.insert_stream_parameters
   gmprocess.core.streamcollection.split_station
   gmprocess.core.streamcollection.are_duplicates
   gmprocess.core.streamcollection.choose_preferred



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.core.streamcollection.INDENT
   gmprocess.core.streamcollection.DEFAULT_IMTS
   gmprocess.core.streamcollection.DEFAULT_IMCS
   gmprocess.core.streamcollection.NETWORKS_USING_LOCATION


.. py:data:: INDENT
   :annotation: = 2

   

.. py:data:: DEFAULT_IMTS
   :annotation: = ['PGA', 'PGV', 'SA(0.3)', 'SA(1.0)', 'SA(3.0)']

   

.. py:data:: DEFAULT_IMCS
   :annotation: = ['GREATER_OF_TWO_HORIZONTALS', 'CHANNELS']

   

.. py:data:: NETWORKS_USING_LOCATION
   :annotation: = ['RE']

   

.. py:class:: StreamCollection(streams=None, drop_non_free=True, handle_duplicates=True, max_dist_tolerance=None, preference_order=None, process_level_preference=None, format_preference=None, config=None)

   Bases: :py:obj:`object`

   A collection/list of StationStream objects.

   This is a list of StationStream objects, where the constituent
   StationTraces are grouped such that:

       - All traces are from the same network/station/instrument.
       - Sample rates must match.
       - Units much match.

   .. todo::

      - Check for and handle misaligned start times and end times.
      - Check units

   .. py:method:: n_passed(self)
      :property:


   .. py:method:: n_failed(self)
      :property:


   .. py:method:: validate(self)

      Some validation checks across streams.


   .. py:method:: select_colocated(self, preference=['HN?', 'BN?', 'HH?', 'BH?'])

      Detect colocated instruments, return preferred instrument type.

      This uses the a list of the first two channel characters, given as
      'preference' in the 'colocated' section of the config. The algorithm
      is:

          1) Generate list of StationStreams that have the same station code.
          2) For each colocated group, loop over the list of preferred
             instrument codes, select the first one that is encountered by
             labeling all others a failed.

              * If the preferred instrument type matches more than one
                StationStream, pick the first (hopefully this never happens).
              * If no StationStream matches any of the codes in the preferred
                list then label all as failed.

      :param preference: List of strings indicating preferred instrument types.
      :type preference: list


   .. py:method:: from_directory(cls, directory)
      :classmethod:

      Create a StreamCollection instance from a directory of data.

      :param directory: Directory of ground motion files (streams) to be read.
      :type directory: str

      :returns: StreamCollection instance.


   .. py:method:: from_traces(cls, traces)
      :classmethod:

      Create a StreamCollection instance from a list of traces.

      :param traces: List of StationTrace objects.
      :type traces: list

      :returns: StreamCollection instance.


   .. py:method:: to_dataframe(self, origin, imcs=None, imts=None)

      Get a summary dataframe of streams.

      Note: The PGM columns underneath each channel will be variable
      depending on the units of the Stream being passed in (velocity
      sensors can only generate PGV) and on the imtlist passed in by
      user. Spectral acceleration columns will be formatted as SA(0.3)
      for 0.3 second spectral acceleration, for example.

      :param directory: Directory of ground motion files (streams).
      :type directory: str
      :param origin_dict: Dictionary with the following keys:
                          - id
                          - magnitude
                          - time (UTCDateTime object)
                          - lon
                          - lat
                          - depth
      :type origin_dict: obspy
      :param imcs: Strings designating desired components to create in table.
      :type imcs: list
      :param imts: Strings designating desired PGMs to create in table.
      :type imts: list

      :returns:

                Pandas dataframe containing columns:
                    - STATION Station code.
                    - NAME Text description of station.
                    - LOCATION Two character location code.
                    - SOURCE Long form string containing source network.
                    - NETWORK Short network code.
                    - LAT Station latitude
                    - LON Station longitude
                    - DISTANCE Epicentral distance (km) (if epicentral lat/lon
                      provided)
                    - HN1 East-west channel (or H1) (multi-index with pgm columns):
                        - PGA Peak ground acceleration (%g).
                        - PGV Peak ground velocity (cm/s).
                        - SA(0.3) Pseudo-spectral acceleration at 0.3 seconds (%g).
                        - SA(1.0) Pseudo-spectral acceleration at 1.0 seconds (%g).
                        - SA(3.0) Pseudo-spectral acceleration at 3.0 seconds (%g).
                    - HN2 North-south channel (or H2) (multi-index with pgm
                      columns):
                        - PGA Peak ground acceleration (%g).
                        - PGV Peak ground velocity (cm/s).
                        - SA(0.3) Pseudo-spectral acceleration at 0.3 seconds (%g).
                        - SA(1.0) Pseudo-spectral acceleration at 1.0 seconds (%g).
                        - SA(3.0) Pseudo-spectral acceleration at 3.0 seconds (%g).
                    - HNZ Vertical channel (or HZ) (multi-index with pgm columns):
                        - PGA Peak ground acceleration (%g).
                        - PGV Peak ground velocity (cm/s).
                        - SA(0.3) Pseudo-spectral acceleration at 0.3 seconds (%g).
                        - SA(1.0) Pseudo-spectral acceleration at 1.0 seconds (%g).
                        - SA(3.0) Pseudo-spectral acceleration at 3.0 seconds (%g).
                    - GREATER_OF_TWO_HORIZONTALS (multi-index with pgm columns):
                        - PGA Peak ground acceleration (%g).
                        - PGV Peak ground velocity (cm/s).
                        - SA(0.3) Pseudo-spectral acceleration at 0.3 seconds (%g).
                        - SA(1.0) Pseudo-spectral acceleration at 1.0 seconds (%g).
                        - SA(3.0) Pseudo-spectral acceleration at 3.0 seconds (%g).
      :rtype: DataFrame


   .. py:method:: __str__(self)

      String summary of the StreamCollection.


   .. py:method:: describe(self)

      More verbose description of StreamCollection.


   .. py:method:: __len__(self)

      Number of constituent StationStreams.


   .. py:method:: __nonzero__(self)


   .. py:method:: __add__(self, other)


   .. py:method:: __iter__(self)

      Iterator for StreamCollection over constituent StationStreams.


   .. py:method:: __setitem__(self, index, stream)


   .. py:method:: __getitem__(self, index)


   .. py:method:: __delitem__(self, index)


   .. py:method:: __getslice__(self, i, j, k=1)


   .. py:method:: append(self, stream)

      Append a single StationStream object.

      :param stream: A StationStream object.


   .. py:method:: pop(self, index=-1)

      Remove and return item at index (default last).


   .. py:method:: copy(self)

      Copy method.


   .. py:method:: select(self, network=None, station=None, instrument=None)

      Select Streams.

      Return a new StreamCollection with only those StationStreams that
      match network, station, and/or instrument selection criteria.

      Based on obspy's `select` method for traces.

      :param network: Network code.
      :type network: str
      :param station: Station code.
      :type station: str
      :param instrument: Instrument code; i.e., the first two characters of the
                         channel.
      :type instrument: str


   .. py:method:: __group_by_net_sta_inst(self)


   .. py:method:: __handle_duplicates(self, max_dist_tolerance, preference_order, process_level_preference, format_preference)

      Removes duplicate data from the StreamCollection, based on the
      process level and format preferences.

      :param max_dist_tolerance: Maximum distance tolerance for determining whether two streams
                                 are at the same location (in meters).
      :type max_dist_tolerance: float
      :param preference_order: A list containing 'process_level', 'source_format',
                               'starttime', 'npts', 'sampling_rate', 'location_code' in the
                               desired order for choosing the preferred trace.
      :type preference_order: list
      :param process_level_preference: A list containing 'V0', 'V1', 'V2', with the order determining
                                       which process level is the most preferred (most preferred goes
                                       first in the list).
      :type process_level_preference: list
      :param format_preference: A list continaing strings of the file source formats (found
                                in gmprocess.io). Does not need to list all of the formats.
                                Example: ['cosmos', 'dmg'] indicates that cosmos files are
                                preferred over dmg files.
      :type format_preference: list


   .. py:method:: get_status(self, status)

      Returns a summary of the status of the streams in StreamCollection.

      If status='short': Returns a two column table, columns are "Failure
          Reason" and "Number of Records". Number of rows is the number of
          unique failure reasons.
      If status='net': Returns a three column table, columns are "Network",
          "Number Passed", and "Number Failed"; number of rows is the number
          of unique networks.
      If status='long': Returns a two column table, columns are "StationID"
          and "Failure Reason".

      :param status: The status level (see description).
      :type status: str

      :returns: pandas.DataFrame
                If status='short' or status='long': pandas.Series
      :rtype: If status='net'



.. py:function:: gather_stream_parameters(streams)

   Helper function for gathering the stream parameters into a datastructure
   and sticking the stream tag into the trace stats dictionaries.

   :param streams: list of StationStream objects.
   :type streams: list

   :returns: dict. Dictionary of the stream parameters.


.. py:function:: insert_stream_parameters(streams, stream_params)

   Helper function for inserting the stream parameters back to the streams.

   :param streams: list of StationStream objects.
   :type streams: list
   :param stream_params: Dictionary of stream parameters.
   :type stream_params: dict

   :returns: list of StationStream objects with stream parameters.


.. py:function:: split_station(grouped_trace_list)


.. py:function:: are_duplicates(tr1, tr2, max_dist_tolerance)

   Check if traces are duplicates.

   Determines whether two StationTraces are duplicates by checking the
   station, channel codes, and the distance between them.

   :param tr1: 1st trace.
   :type tr1: StationTrace
   :param tr2: 2nd trace.
   :type tr2: StationTrace
   :param max_dist_tolerance: Maximum distance tolerance for determining whether two streams
                              are at the same location (in meters).
   :type max_dist_tolerance: float

   :returns: bool. True if traces are duplicates, False otherwise.


.. py:function:: choose_preferred(tr1, tr2, preference_order, process_level_preference, format_preference)

   Determines which trace is preferred. Returns the preferred the trace.

   :param tr1: 1st trace.
   :type tr1: StationTrace
   :param tr2: 2nd trace.
   :type tr2: StationTrace
   :param preference_order: A list containing 'process_level', 'source_format', 'starttime',
                            'npts', 'sampling_rate', 'location_code' in the desired order
                            for choosing the preferred trace.
   :type preference_order: list
   :param process_level_preference: A list containing 'V0', 'V1', 'V2', with the order determining
                                    which process level is the most preferred (most preferred goes
                                    first in the list).
   :type process_level_preference: list
   :param format_preference: A list continaing strings of the file source formats (found
                             in gmprocess.io). Does not need to list all of the formats.
                             Example: ['cosmos', 'dmg'] indicates that cosmos files are
                             preferred over dmg files.
   :type format_preference: list

   :returns: The preferred trace (StationTrace).


