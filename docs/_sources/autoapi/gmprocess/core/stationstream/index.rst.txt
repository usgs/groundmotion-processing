:py:mod:`gmprocess.core.stationstream`
======================================

.. py:module:: gmprocess.core.stationstream


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.core.stationstream.StationStream



Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.core.stationstream._channel_from_stats



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.core.stationstream.UNITS
   gmprocess.core.stationstream.REVERSE_UNITS
   gmprocess.core.stationstream.N_LANCZOS
   gmprocess.core.stationstream.UNUSED_STANDARD_PARAMS


.. py:data:: UNITS
   

   

.. py:data:: REVERSE_UNITS
   

   

.. py:data:: N_LANCZOS
   :annotation: = 20

   

.. py:data:: UNUSED_STANDARD_PARAMS
   :annotation: = ['instrument_period', 'instrument_damping', 'process_time', 'process_level', 'structure_type',...

   

.. py:class:: StationStream(traces=None, inventory=None)

   Bases: :py:obj:`obspy.core.stream.Stream`

   The gmprocess subclass of ObsPy's Stream object.

   ObsPy provides a Stream object that serves as a container for zero-to-many
   Trace objects, and gmprocess subclasses the Stream object with the
   StationStream object, which contains StationTrace objects. It also provides
   facilities for extracting ObsPy inventory data structures, and provenance
   from the contained StationTrace objects.

   The StationStream class is meant for grouping Traces from the same
   "station". In practice, what this really means is usually all of the
   channels from one instrument, with the same start and end times. Thus,
   he StationStream object has a get_id method, which returns a string that
   consists of the network code, station code, and the first two characters
   of the channel code, since these should all be applicable to all traces in
   the StationStream object.

   .. py:method:: validate(self)

      Validation checks for Traces within a StationStream.


   .. py:method:: __check_sample_rate(self)


   .. py:method:: __check_npts(self)


   .. py:method:: __check_starts(self)


   .. py:method:: __check_channels(self)


   .. py:method:: __check_id(self)


   .. py:method:: get_id(self)

      Get the StationStream ID.

      This consists of the network, station, and first two characters of the
      channel (to indicate instrument type). This is currently consistent
      with how the channels are grouped and ignores the location code because
      it doesn't seem like it is defined in a consistent fashion.


   .. py:method:: get_net_sta(self)

      Get just the network and station compopnent of the ID.


   .. py:method:: get_inst(self)

      Get just the network and station compopnent of the ID.


   .. py:method:: passed(self)
      :property:

      Check the traces to see if any have failed any processing steps.

      :returns: True if no failures in Traces, False if there are.
      :rtype: bool


   .. py:method:: num_horizontal(self)
      :property:

      Get the number of horizontal components in the StationStream.


   .. py:method:: __str__(self, extended=False, indent=0)

      String summary of the StationStream.

      :param extended: Unused; kept for compatibility with ObsPy parent class.
      :type extended: bool
      :param indent: Number of characters to indent.
      :type indent: int


   .. py:method:: setStreamParam(self, param_id, param_attributes)

      Add to the StationStreams's set of arbitrary metadata.

      :param param_id: Key for parameters dictionary.
      :type param_id: str
      :param param_attributes: Parameters for the given key.
      :type param_attributes: dict or list


   .. py:method:: getStreamParamKeys(self)

      Get a list of all available parameter keys.

      :returns: List of available parameter keys.
      :rtype: list


   .. py:method:: getStreamParam(self, param_id)

      Retrieve some arbitrary metadata.

      :param param_id: Key for parameters dictionary.
      :type param_id: str

      :returns:     Parameters for the given key.
      :rtype: dict or list


   .. py:method:: getProvenanceDocuments(self, base_prov=None)

      Generate provenance Document.

      :param base_prov: Base provenance document.

      :returns: Provenance document.


   .. py:method:: getInventory(self)

      Extract an ObsPy inventory object from a StationStream.


   .. py:method:: check_stream(self)

      Check StationStream for being flagged as failed.

      Processing checks get regorded as a 'failure' parameter in
      StationTraces. Streams also need to be classified as passed/faild,
      where if any of the checks have failed for consistent traces then the
      stream has failed.



.. py:function:: _channel_from_stats(stats)


