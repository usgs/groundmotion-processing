:py:mod:`gmprocess.core.stationtrace`
=====================================

.. py:module:: gmprocess.core.stationtrace


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.core.stationtrace.StationTrace



Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.core.stationtrace._stats_from_inventory
   gmprocess.core.stationtrace._stats_from_header
   gmprocess.core.stationtrace._get_software_agent
   gmprocess.core.stationtrace._get_person_agent
   gmprocess.core.stationtrace._get_waveform_entity
   gmprocess.core.stationtrace._get_activity



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.core.stationtrace.UNITS
   gmprocess.core.stationtrace.REVERSE_UNITS
   gmprocess.core.stationtrace.PROCESS_LEVELS
   gmprocess.core.stationtrace.REV_PROCESS_LEVELS
   gmprocess.core.stationtrace.LENGTH_CONVERSIONS
   gmprocess.core.stationtrace.MAX_DIP_OFFSET
   gmprocess.core.stationtrace.STANDARD_KEYS
   gmprocess.core.stationtrace.INT_TYPES
   gmprocess.core.stationtrace.FLOAT_TYPES
   gmprocess.core.stationtrace.TIMEFMT
   gmprocess.core.stationtrace.TIMEFMT_MS
   gmprocess.core.stationtrace.NS_PREFIX
   gmprocess.core.stationtrace.NS_SEIS
   gmprocess.core.stationtrace.MAX_ID_LEN
   gmprocess.core.stationtrace.PROV_TIME_FMT
   gmprocess.core.stationtrace.ACTIVITIES


.. py:data:: UNITS
   

   

.. py:data:: REVERSE_UNITS
   

   

.. py:data:: PROCESS_LEVELS
   

   

.. py:data:: REV_PROCESS_LEVELS
   

   

.. py:data:: LENGTH_CONVERSIONS
   

   

.. py:data:: MAX_DIP_OFFSET
   :annotation: = 0.1

   

.. py:data:: STANDARD_KEYS
   

   

.. py:data:: INT_TYPES
   

   

.. py:data:: FLOAT_TYPES
   

   

.. py:data:: TIMEFMT
   :annotation: = %Y-%m-%dT%H:%M:%SZ

   

.. py:data:: TIMEFMT_MS
   :annotation: = %Y-%m-%dT%H:%M:%S.%fZ

   

.. py:data:: NS_PREFIX
   :annotation: = seis_prov

   

.. py:data:: NS_SEIS
   

   

.. py:data:: MAX_ID_LEN
   :annotation: = 12

   

.. py:data:: PROV_TIME_FMT
   :annotation: = %Y-%m-%dT%H:%M:%S.%fZ

   

.. py:data:: ACTIVITIES
   

   

.. py:class:: StationTrace(data=np.array([]), header=None, inventory=None, config=None)

   Bases: :py:obj:`obspy.core.trace.Trace`

   Subclass of Obspy Trace object which holds more metadata.

   ObsPy provides a Trace object that serves as a container for waveform data
   from a single channel, as well as some basic metadata about the waveform
   start/end times, number of points, sampling rate/interval, and
   network/station/channel/location information.

   gmprocess subclasses the Trace object with a StationTrace object, which
   provides the following additional features:

       - Validation that length of data matches the number of points in the
         metadata.
       - Validation that required values are set in metadata.
       - A `fail` method which can be used by processing routines to mark when
         processing of the StationTrace has failed some sort of check (signal
         to noise ratio, etc.)
       - A `free_field` property which can be used to query the object to
         ensure that its data comes from a free-field sensor. Note: this is
         not always known reliably, and different people have have different
         definitions of the term free_field. When possible, we define a
         mapping between location code and the free_field property. For
         example, see the LOCATION_CODES variable core.py in
         `gmprocess.io.fdsn`.
       - Methods (e.g., `getProvenance`, `setProvenance`) for tracking
         processing steps that have been performed. These are aligned with the
         SEIS-PROV standard for processing provenance, described here:
         http://seismicdata.github.io/SEIS-PROV/_generated_details.html#activities
       - Methods (e.g., `getParameter` and `setParameter`) for tracking of
         arbitrary metadata in the form of a dictionary as trace property
         (self.parameters).

   .. py:property:: free_field

      Is this station a free-field station?

      :returns: True if a free-field sensor, False if not.
      :rtype: bool

   .. py:property:: passed

      Has this trace passed checks?

   .. py:method:: fail(reason)

      Note that a check on this StationTrace failed for a given reason.

      This method will set the parameter "failure", and store the reason
      provided, plus the name of the calling function.

      :param reason: Reason given for failure.
      :type reason: str


   .. py:method:: validate()

      Ensure that all required metadata fields have been set.

      :raises KeyError: - When standard dictionary is missing required fields
          - When standard values are of the wrong type
          - When required values are set to a default.
      :raises ValueError: - When number of points in header does not match data length.


   .. py:method:: differentiate(frequency=True)

      Differentiate the trace with respect to time.

      :type method: str, optional
      :param method: Method to use for differentiation. Defaults to
          ``'gradient'``. See the `Supported Methods`_ section below for
          further details.

      .. note::

          This operation is performed in place on the actual data arrays. The
          raw data is not accessible anymore afterwards. To keep your
          original data, use :meth:`~obspy.core.trace.Trace.copy` to create
          a copy of your trace object.
          This also makes an entry with information on the applied processing
          in ``stats.processing`` of this trace.

      .. rubric:: _`Supported Methods`

      ``'gradient'``
          The gradient is computed using central differences in the interior
          and first differences at the boundaries. The returned gradient
          hence has the same shape as the input array. (uses
          :func:`numpy.gradient`)


   .. py:method:: integrate(frequency=False, initial=0.0, demean=False, taper=False, config=None)

      Integrate a StationTrace with respect to either frequency or time.

      :param frequency: Determine if we're integrating in frequency domain.
                        If not, integrate in time domain.
      :type frequency: bool
      :param initial: Define initial value returned in result.
      :type initial: float
      :param demean: Remove mean from array before integrating.
      :type demean: bool
      :param taper: Taper the ends of entire trace.
      :type taper: bool
      :param config: Configuration dictionary (or None). See get_config().
      :type config: dict

      :returns: Input StationTrace is integrated and returned.
      :rtype: StationTrace


   .. py:method:: filter(type='highpass', freq=0.05, corners=5.0, zerophase=False, config=None, frequency_domain=True, **options)

      Overwrite parent function to allow for conf options.

      :param type: What type of filter? "highpass" or "lowpass".
      :type type: str
      :param freq: Corner frequency (Hz).
      :type freq: float
      :param corners: Number of poles.
      :type corners: float
      :param zerophase: Zero phase filter?
      :type zerophase: bool
      :param config: Configuration options.
      :type config: dict
      :param frequency_domain: Apply filter in frequency domain?
      :type frequency_domain: bool


   .. py:method:: getProvenanceKeys()

      Get a list of all available provenance keys.

      :returns: List of available provenance keys.
      :rtype: list


   .. py:method:: getProvenance(prov_id)

      Get seis-prov compatible attributes whose id matches prov_id.

      See http://seismicdata.github.io/SEIS-PROV/_generated_details.html

      :param prov_id: Provenance ID (see URL above).
      :type prov_id: str

      :returns: Sequence of prov_attribute dictionaries (see URL above).
      :rtype: list


   .. py:method:: setProvenance(prov_id, prov_attributes)

      Update a trace's provenance information.

      :param trace: Trace of strong motion dataself.
      :type trace: obspy.core.trace.Trace
      :param prov_id: Activity prov:id (see URL above).
      :type prov_id: str
      :param prov_attributes: Activity attributes for the given key.
      :type prov_attributes: dict or list


   .. py:method:: getAllProvenance()

      Get internal list of processing history.

      :returns:     Sequence of dictionaries containing fields:
                    - prov_id Activity prov:id (see URL above).
                    - prov_attributes Activity attributes for the given key.
      :rtype: list


   .. py:method:: getProvenanceDocument(base_prov=None, gmprocess_version='unknown')

      Generate a provenance document.

      :param gmprocess_version: gmprocess version string.
      :type gmprocess_version: str
      :param base_prov: Base provenance document.

      :returns: Provenance document.


   .. py:method:: setProvenanceDocument(provdoc)


   .. py:method:: hasParameter(param_id)

      Check to see if Trace contains a given parameter.

      :param param_id: Name of parameter to check.
      :type param_id: str

      :returns: True if parameter is set, False if not.
      :rtype: bool


   .. py:method:: setParameter(param_id, param_attributes)

      Add to the StationTrace's set of arbitrary metadata.

      :param param_id: Key for parameters dictionary.
      :type param_id: str
      :param param_attributes: Parameters for the given key.
      :type param_attributes: dict or list


   .. py:method:: setCached(name, array_dict)

      Store a dictionary of arrays in StationTrace.

      :param name: Name of data dictionary to be stored.
      :type name: str
      :param array_dict:
                         Dictionary with:
                             - key array name
                             - value as numpy array
      :type array_dict: dict


   .. py:method:: getCached(name)

      Retrieve a dictionary of arrays.

      :param name: Name of dictionary to retrieve.
      :type name: str

      :returns: Dictionary of arrays (see setSpectrum).
      :rtype: dict


   .. py:method:: hasCached(name)

      Check if StationTrace has cached attribute.


   .. py:method:: getCachedNames()

      Return list of arrays that have been cached.

      :returns: List of cached arrays in this StationTrace.
      :rtype: list


   .. py:method:: getParameterKeys()

      Get a list of all available parameter keys.

      :returns: List of available parameter keys.
      :rtype: list


   .. py:method:: getParameter(param_id)

      Retrieve some arbitrary metadata.

      :param param_id: Key for parameters dictionary.
      :type param_id: str

      :returns:     Parameters for the given key.
      :rtype: dict or list


   .. py:method:: getProvDataFrame()


   .. py:method:: getProvSeries()

      Return a pandas Series containing the processing history for the
      trace.

      BO.NGNH31.HN2   Remove Response   input_units   counts
      -                                 output_units  cm/s^2
      -               Taper             side          both
      -                                 window_type   Hann
      -                                 taper_width   0.05

      :returns:     Pandas Series (see above).
      :rtype: Series


   .. py:method:: __str__(id_length=None, indent=0)

      Extends Trace __str__.



.. py:function:: _stats_from_inventory(data, inventory, seed_id, start_time)


.. py:function:: _stats_from_header(header, config)


.. py:function:: _get_software_agent(pr, gmprocess_version)

   Get the seis-prov entity for the gmprocess software.

   :param pr: Existing ProvDocument.
   :type pr: prov.model.ProvDocument
   :param gmprocess_version: gmprocess version.
   :type gmprocess_version: str

   :returns:     Provenance document updated with gmprocess software name/version.
   :rtype: prov.model.ProvDocument


.. py:function:: _get_person_agent(pr, config=None)

   Get the seis-prov entity for the user software.

   :param pr: Existing ProvDocument.
   :type pr: prov.model.ProvDocument
   :param config: Configuration options.
   :type config: dict

   :returns:     Provenance document updated with gmprocess software name/version.
   :rtype: prov.model.ProvDocument


.. py:function:: _get_waveform_entity(trace, pr)

   Get the seis-prov entity for an input Trace.

   :param trace: Input Obspy Trace object.
   :type trace: Trace
   :param pr: prov.model.ProvDocument
   :type pr: Prov

   :returns:     Provenance document updated with waveform entity information.
   :rtype: prov.model.ProvDocument


.. py:function:: _get_activity(pr, activity, attributes, sequence)

   Get the seis-prov entity for an input processing "activity".

   See
   http://seismicdata.github.io/SEIS-PROV/_generated_details.html#activities

   for details on the types of activities that are possible to capture.


   :param pr: Existing ProvDocument.
   :type pr: prov.model.ProvDocument
   :param activity: The prov:id for the input activity.
   :type activity: str
   :param attributes: The attributes associated with the activity.
   :type attributes: dict
   :param sequence: Integer used to identify the order in which the activities were
                    performed.
   :type sequence: int

   :returns:     Provenance document updated with input activity.
   :rtype: prov.model.ProvDocument


