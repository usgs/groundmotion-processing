:py:mod:`gmprocess.waveform_processing.windows`
===============================================

.. py:module:: gmprocess.waveform_processing.windows

.. autoapi-nested-parse::

   Helper functions for windowing singal and noise in a trace.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.waveform_processing.windows.cut
   gmprocess.waveform_processing.windows.window_checks
   gmprocess.waveform_processing.windows.signal_split
   gmprocess.waveform_processing.windows.signal_end
   gmprocess.waveform_processing.windows.trim_multiple_events



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.waveform_processing.windows.M_TO_KM


.. py:data:: M_TO_KM
   

   

.. py:function:: cut(st, sec_before_split=None)

   Cut/trim the record.

   This method minimally requires that the windows.signal_end method has been
   run, in which case the record is trimmed to the end of the signal that
   was estimated by that method.

   To trim the beginning of the record, the sec_before_split must be
   specified, which uses the noise/signal split time that was estiamted by the
   windows.signal_split mehtod.

   # Recent changes to reflect major updates to how oq-hazardlib works:
   # https://github.com/gem/oq-engine/issues/7018

   :param st: Stream of data.
   :type st: StationStream
   :param sec_before_split: Seconds to trim before split. If None, then the beginning of the
                            record will be unchanged.
   :type sec_before_split: float

   :returns: cut streams.
   :rtype: stream


.. py:function:: window_checks(st, min_noise_duration=0.5, min_signal_duration=5.0)

   Check if the split/end windowing have long enough durations.

   :param st: Stream of data.
   :type st: StationStream
   :param min_noise_duration: Minimum duration of noise window (sec).
   :type min_noise_duration: float
   :param min_signal_duration: Minimum duration of signal window (sec).
   :type min_signal_duration: float


.. py:function:: signal_split(st, origin, model=None, picker_config=None, config=None)

   This method tries to identifies the boundary between the noise and signal
   for the waveform. The split time is placed inside the
   'processing_parameters' key of the trace stats.

   The P-wave arrival is used as the split between the noise and signal
   windows. Multiple picker methods are suppored and can be configured in the
   config file
   '~/.gmprocess/picker.yml

   :param st: Stream of data.
   :type st: StationStream
   :param origin: ScalarEvent object.
   :type origin: ScalarEvent
   :param model: TauPyModel object for computing travel times.
   :type model: TauPyModel
   :param picker_config: Dictionary containing picker configuration information.
   :type picker_config: dict
   :param config: Dictionary containing system configuration information.
   :type config: dict

   :returns: trace with stats dict updated to include a
             stats['processing_parameters']['signal_split'] dictionary.


.. py:function:: signal_end(st, event_time, event_lon, event_lat, event_mag, method=None, vmin=None, floor=None, model=None, epsilon=2.0)

   Estimate end of signal by using a model of the 5-95% significant
   duration, and adding this value to the "signal_split" time. This probably
   only works well when the split is estimated with a p-wave picker since
   the velocity method often ends up with split times that are well before
   signal actually starts.

   :param st: Stream of data.
   :type st: StationStream
   :param event_time: Event origin time.
   :type event_time: UTCDateTime
   :param event_mag: Event magnitude.
   :type event_mag: float
   :param event_lon: Event longitude.
   :type event_lon: float
   :param event_lat: Event latitude.
   :type event_lat: float
   :param method: Method for estimating signal end time. Either 'velocity'
                  or 'model'.
   :type method: str
   :param vmin: Velocity (km/s) for estimating end of signal. Only used if
                method="velocity".
   :type vmin: float
   :param floor: Minimum duration (sec) applied along with vmin.
   :type floor: float
   :param model: Short name of duration model to use. Must be defined in the
                 gmprocess/data/modules.yml file.
   :type model: str
   :param epsilon: Number of standard deviations; if epsilon is 1.0, then the signal
                   window duration is the mean Ds + 1 standard deviation. Only used
                   for method="model".
   :type epsilon: float

   :returns: trace with stats dict updated to include a
             stats['processing_parameters']['signal_end'] dictionary.


.. py:function:: trim_multiple_events(st, origin, catalog, travel_time_df, pga_factor, pct_window_reject, gmpe, site_parameters, rupture_parameters)

   Uses a catalog (list of ScalarEvents) to handle cases where a trace might
   contain signals from multiple events. The catalog should contain events
   down to a low enough magnitude in relation to the events of interest.
   Overall, the algorithm is as follows:

   1) For each earthquake in the catalog, get the P-wave travel time
      and estimated PGA at this station.

   2) Compute the PGA (of the as-recorded horizontal channels).

   3) Select the P-wave arrival times across all events for this record
      that are (a) within the signal window, and (b) the predicted PGA is
      greater than pga_factor times the PGA from step #1.

   4) If any P-wave arrival times match the above criteria, then if any of
      the arrival times fall within in the first pct_window_reject*100%
      of the signal window, then reject the record. Otherwise, trim the
      record such that the end time does not include any of the arrivals
      selected in step #3.

   :param st: Stream of data.
   :type st: StationStream
   :param origin: ScalarEvent object associated with the StationStream.
   :type origin: ScalarEvent
   :param catalog: List of ScalarEvent objects.
   :type catalog: list
   :param travel_time_df: A pandas DataFrame that contains the travel time information
                          (obtained from
                           gmprocess.waveform_processing.phase.create_travel_time_dataframe).
                          The columns in the DataFrame are the station ids and the indices
                          are the earthquake ids.
   :type travel_time_df: DataFrame
   :param pga_factor: A decimal factor used to determine whether the predicted PGA
                      from an event arrival is significant enough that it should be
                      considered for removal.
   :type pga_factor: float
   :param pct_window_reject:
                             A decimal from 0.0 to 1.0 used to determine if an arrival should
                              be trimmed from the record, or if the entire record should be
                              rejected. If the arrival falls within the first
                              pct_window_reject * 100% of the signal window, then the entire
                              record will be rejected. Otherwise, the record will be trimmed
                              appropriately.
   :type pct_window_reject: float
   :param gmpe: Short name of the GMPE to use. Must be defined in the modules file.
   :type gmpe: str
   :param site_parameters: Dictionary of site parameters to input to the GMPE.
   :type site_parameters: dict
   :param rupture_parameters: Dictionary of rupture parameters to input to the GMPE.

   :returns: Processed stream.
   :rtype: StationStream


