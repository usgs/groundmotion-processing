:py:mod:`gmprocess.waveform_processing.nn_quality_assurance`
============================================================

.. py:module:: gmprocess.waveform_processing.nn_quality_assurance


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.waveform_processing.nn_quality_assurance.neuralNet



Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.waveform_processing.nn_quality_assurance.isNumber
   gmprocess.waveform_processing.nn_quality_assurance.loadCSV
   gmprocess.waveform_processing.nn_quality_assurance.sigmoid
   gmprocess.waveform_processing.nn_quality_assurance.tanh
   gmprocess.waveform_processing.nn_quality_assurance.deskewData
   gmprocess.waveform_processing.nn_quality_assurance.standardizeData
   gmprocess.waveform_processing.nn_quality_assurance.decorrelateData
   gmprocess.waveform_processing.nn_quality_assurance.preprocessQualityMetrics
   gmprocess.waveform_processing.nn_quality_assurance.get_husid
   gmprocess.waveform_processing.nn_quality_assurance.getFreqIndex
   gmprocess.waveform_processing.nn_quality_assurance.getHusidIndex
   gmprocess.waveform_processing.nn_quality_assurance.calculateSNR_min
   gmprocess.waveform_processing.nn_quality_assurance.calculateHusid
   gmprocess.waveform_processing.nn_quality_assurance.getClassificationMetrics
   gmprocess.waveform_processing.nn_quality_assurance.computeQualityMetrics
   gmprocess.waveform_processing.nn_quality_assurance.NNet_QA



.. py:function:: isNumber(s)

   Check if given input is a number.

   :param s: Data to test
   :type s: any type

   :returns: True if is a number, False if isn't
   :rtype: bool


.. py:function:: loadCSV(data_path, row_ignore=0, col_ignore=0)

   Load csv files from a given path and returns a list of list.
   For all imported data, check if is a number. If so, returns a
   float. If not, returns a string.

   :param data_path: path to the csv to load
   :type data_path: string
   :param row_ignore: number of rows to ignore
   :type row_ignore: int
   :param col_ignore: number of columns to ignore
   :type col_ignore: int

   :returns: containing the data from the csv
   :rtype: list of list


.. py:function:: sigmoid(v_input)

   Performs a sigmoid operation on the input (1/(e(-x)+1))

   :param v_input: a number defined on R (real)
   :type v_input: float

   :returns: sigmoid result (a number between 0 and 1)
   :rtype: float


.. py:function:: tanh(v_input)

   Performs a hyperbolic tangent operation on the input (2/(e(2x)+1))

   :param v_input:
   :type v_input: float) a number defined on R (real

   :returns: tanh result (a number between -1 and 1)
   :rtype: float


.. py:class:: neuralNet

   Class allowing the instantiation and use of simple (1 or 2 layers)
   neural networks

   .. py:method:: loadNN(self, nn_path)

      Populate an instantated neural netowrk with data contained in a
      specific folder.

      :param nn_path: path to the folder containing the required
      :type nn_path: string
      :param information:
      :type information: masterF.txt, weights.csv, biases.csv


   .. py:method:: useNN(self, v_input)

      Use a populated neural network (i.e. from the input, returns the
      classification score or the regression result).

      :param v_input: list or numpy array of the inputs
      :type v_input: list or np.array
      :param (must be all numerical). Size must be equal to the NN input layer:
      :param size.:

      :returns: numpy array containing the results.
      :rtype: v_inter (np.array)



.. py:function:: deskewData(data, model_name)

   Performs the deskewing operations used in Bellagamba et al. (2019) on the
   quality metrics vector. Depending on the selected model.

   :param data: 20 quality metrics computed as described in the
   :type data: list of floats
   :param paper:
   :param model_name: name of the selected model. Available 'Cant' and
   :type model_name: string
   :param 'CantWell' as described in the paper:

   :returns: processed (deskewed) data
   :rtype: list of float


.. py:function:: standardizeData(data, mu, sigma)

   Performs a standardization operation on the given data ((X-mu)/sigma)

   :param data: data to standardize (size represents the dimensionality of the data
                and not the number of point to standardize)
   :type data: list of float
   :param mu: means
   :type mu: list of float
   :param sigma: standard deviation
   :type sigma: list of float

   :returns: standardized data
   :rtype: list o float


.. py:function:: decorrelateData(data, M)

   Decorrelate the data based on a Mahalanobis tranform. The transformation
   matrix is given as an input.

   :param data: numpy array containing the data to be decorrelated (size = N).
   :type data: np.array
   :param M: decorrelation matrix (size NxN)
   :type M: np.array

   :returns: list of float containing the decorrelated data


.. py:function:: preprocessQualityMetrics(qm, model_name)

   Pre-process the quality metrics according to Bellagamba et al. (2019)
   (i.e. deskews, standardizes and decorrelates the quality metrics)

   :param qm: quality metrics estimated according to the paper
   :type qm: list of float
   :param model_name: name of the used model for processing. Available: 'Cant' and
                      'CantWell'.
   :type model_name: string

   :returns: list of float containing the pre-processed quality metrics.


.. py:function:: get_husid(acceleration, time_vector)

   Returns the Husid vector, defined as int{acceleration ** 2.}

   :param acceleration: Vector of acceleration values
   :type acceleration: np.array
   :param time_vector: Time vector in seconds
   :type time_vector: np.array


.. py:function:: getFreqIndex(ft_freq, lower, upper)

   Gets the indices of a frequency range in the frequency vector

   :param ft_freq: list of ordred frequencies
   :type ft_freq: list of float
   :param lower: lower boud of the frequency range
   :type lower: float
   :param upper: upper bound of the frequency range
   :type upper: float

   :returns: the indices bounding the range
   :rtype: int, int


.. py:function:: getHusidIndex(husid, threshold)

   Returns the index of the husid for a particular threshold

   :param husid: husid vector
   :type husid: list of float
   :param threshold: threshold not to be exceeded
   :type threshold: float

   :returns: the index of the latest value below the threshold
   :rtype: int


.. py:function:: calculateSNR_min(ft_freq, snr)

   Calculate the SNR min between 0.1 and 20 Hz

   :param ft_freq: vector of frequencies used in the Fourier spectrum
   :type ft_freq: list of float
   :param snr: vector of the snr at the frequencies in ft_freq
   :type snr: list of float

   :returns: min snr between 0.1 and 20 Hz
   :rtype: float


.. py:function:: calculateHusid(acc, t)

   Calculate the husid and Arias of a signal.

   :param acc: accelerogram vector
   :type acc: np.array
   :param t: time vector (constant time step)
   :type t: np.array

   :returns: vector of floats
             AI: vector of floats
             Arias: float, max value of AI
             husid index at 5, 75 and 95% (used for duration)
   :rtype: husid


.. py:function:: getClassificationMetrics(tr, p_pick, delta_t)

   Compute the quality metrics as in Bellagamba et al. (2019). More details
   in the paper.

   WARNINGS: - Acceleration untis changed into g at the beginning!
             - Vertical component is not used!

   :param tr: each list contains an horizontal trace
   :type tr: list of list of float
   :param p_pick: estimated P-wave arrival time (in seconds) from the start of the
                  record
   :type p_pick: float
   :param delta_t: time step used in the record in seconds (decimal)
   :type delta_t: float

   :returns: List of float containing the quality metrics (size = 20)


.. py:function:: computeQualityMetrics(st)

   Get the 2 horizontal components and format the P-wave arrival time before
   launching the computation of the qualtiy metrics as in Bellagamba et al.
   (2019)

   :param st: a list of trace as defined in gmprocess (USGS)
   :type st: list of trace

   :returns: List of float containing the 20 quality metrics


.. py:function:: NNet_QA(st, acceptance_threshold, model_name)

   Assess the quality of a stream by analyzing its two horizontal components
   as described in Bellagamba et al. (2019). Performs three steps:
   1) Compute the quality metrics (see paper for more info)
   2) Preprocess the quality metrics (deskew, standardize and decorrelate)
   3) Evaluate the quality using a neural network-based model
   Two models are available: 'Cant' and 'CantWell'.
   To minimize the number of low quality ground motion included, the natural
   acceptance threshold 0.5 can be raised (up to an extreme value of 0.95).
   Recommended parameters are:
   -   acceptance_threshold = 0.5 or 0.6
   -   model_name = 'CantWell'

   :param st: The ground motion record to analyze. Should contain at least 2
              orthogonal  horizontal traces.
   :type st: list of traces
   :param acceptance_threshold: Threshold from which GM records are considered acceptable.
   :type acceptance_threshold: float
   :param model_name: name of the used model ('Cant' or 'CantWell')
   :type model_name: string

   :returns: stream of traces tagged with quality scores and flags,
             used model name and acceptance threshold
   :rtype: st


