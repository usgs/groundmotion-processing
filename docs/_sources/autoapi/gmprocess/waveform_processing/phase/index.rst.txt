:py:mod:`gmprocess.waveform_processing.phase`
=============================================

.. py:module:: gmprocess.waveform_processing.phase


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.waveform_processing.phase.butter_bandpass
   gmprocess.waveform_processing.phase.butter_bandpass_filter
   gmprocess.waveform_processing.phase.AICPicker
   gmprocess.waveform_processing.phase.STALTA_Earle
   gmprocess.waveform_processing.phase.PowerPicker
   gmprocess.waveform_processing.phase.pick_kalkan
   gmprocess.waveform_processing.phase.pick_ar
   gmprocess.waveform_processing.phase.pick_baer
   gmprocess.waveform_processing.phase.pick_travel
   gmprocess.waveform_processing.phase.pick_yeck
   gmprocess.waveform_processing.phase.pick_power
   gmprocess.waveform_processing.phase.calc_snr2
   gmprocess.waveform_processing.phase.sub_calc_snr
   gmprocess.waveform_processing.phase.calc_snr
   gmprocess.waveform_processing.phase.pphase_pick
   gmprocess.waveform_processing.phase._get_statelevel
   gmprocess.waveform_processing.phase.create_travel_time_dataframe



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.waveform_processing.phase.NAN_TIME


.. py:data:: NAN_TIME
   

   

.. py:function:: butter_bandpass(lowcut, highcut, fs, order=5)


.. py:function:: butter_bandpass_filter(data, lowcut, highcut, fs, order=5)


.. py:function:: AICPicker(data, triggers, search_window, sps)


.. py:function:: STALTA_Earle(data, datao, sps, STAW, STAW2, LTAW, hanning, threshold, threshold2, threshdrop)


.. py:function:: PowerPicker(tr, highpass=1.4, lowpass=6, order=3, sta=3.0, sta2=3.0, lta=20.0, hanningWindow=3.0, threshDetect=2.0, threshDetect2=2.5, threshRestart=99999999)

   Pick P-wave arrival time.

   :param tr: StationTrace containing waveform to be picked.
   :type tr: StationTrace
   :param highpass: Frequency of the high-pass filter.
   :type highpass: float
   :param lowpass: Frequency of the low-pass filter.
   :type lowpass: float
   :param order: Order of the filter.
   :type order: int
   :param sta: First short term average window (s).
   :type sta: float
   :param sta2: Second short term average window (s).
   :type sta2: float
   :param lta: Long term average window (s).
   :type lta: float
   :param hanningWindow: length of the Hanning window in seconds applied to the
                         characteristic function.
   :type hanningWindow: float
   :param threshDetect: First detection threshold.
   :type threshDetect: float
   :param threshDetect2: Second detection threshold.
   :type threshDetect2: float
   :param threshRestart: threshRestart is the threshold where the picker rearms to choose
                         another pick.
   :type threshRestart: float

   :returns:     P-wave pick time as number of seconds after start of trace.
   :rtype: float


.. py:function:: pick_kalkan(stream, picker_config=None, config=None)

   Wrapper around the Kalkan P-phase picker.

   :param stream: Stream containing waveforms that need to be picked.
   :type stream: StationStream
   :param picker_config: Dictionary with parameters for Kalkan P-phase picker.
                         See picker.yml.
   :type picker_config: dict
   :param config:
                  Configuration dictionary. Key value here is:
                      windows:
                          window_checks:
                              min_noise_duration
   :type config: dict

   :returns:     - Best estimate for p-wave arrival time (s since start of trace).
                 - Mean signal to noise ratio based on the pick.
   :rtype: tuple


.. py:function:: pick_ar(stream, picker_config=None, config=None)

   Wrapper around the AR P-phase picker.

   :param stream: Stream containing waveforms that need to be picked.
   :type stream: StationStream
   :param picker_config: Dictionary with parameters for AR P-phase picker. See picker.yml.
   :type picker_config: dict
   :param config:
                  Configuration dictionary. Key value here is:
                      windows:
                          window_checks:
                              min_noise_duration
   :type config: dict

   :returns:     - Best estimate for p-wave arrival time (s since start of trace).
                 - Mean signal to noise ratio based on the pick.
   :rtype: tuple


.. py:function:: pick_baer(stream, picker_config=None, config=None)

   Wrapper around the Baer P-phase picker.

   :param stream: Stream containing waveforms that need to be picked.
   :type stream: StationStream
   :param picker_config: Dictionary with parameters for Baer P-phase picker. See picker.yml.
   :type picker_config: dict
   :param config:
                  Configuration dictionary. Key value here is:
                      windows:
                          window_checks:
                              min_noise_duration
   :type config: dict

   :returns:     - Best estimate for p-wave arrival time (s since start of trace).
                 - Mean signal to noise ratio based on the pick.
   :rtype: tuple


.. py:function:: pick_travel(stream, origin, model=None, picker_config=None)

   Use TauP travel time model to find P-Phase arrival time.

   :param stream: StationStream containing 1 or more channels of waveforms.
   :type stream: StationStream
   :param origin: Event origin/magnitude information.
   :type origin: ScalarEvent
   :param model: TauPyModel object for computing travel times.
   :type model: TauPyModel

   :returns:     - Best estimate for p-wave arrival time (s since start of trace).
                 - Mean signal to noise ratio based on the pick.
   :rtype: tuple


.. py:function:: pick_yeck(stream)

   IN DEVELOPMENT! SNR based P-phase picker.

   :param stream: Stream containing waveforms that need to be picked.
   :type stream: StationStream

   :returns:     - Best estimate for p-wave arrival time (s since start of trace).
                 - Mean signal to noise ratio based on the pick.
   :rtype: tuple


.. py:function:: pick_power(stream, picker_config=None, config=None)

   Wrapper around the PowerPicker.

   :param stream: Stream containing waveforms that need to be picked.
   :type stream: StationStream
   :param picker_config: Dictionary with parameters for PowerPicker. See picker.yml.
   :type picker_config: dict
   :param config:
                  Configuration dictionary. Key value here is:
                      windows:
                          window_checks:
                              min_noise_duration
   :type config: dict

   :returns:     - Best estimate for p-wave arrival time (s since start of trace).
                 - Mean signal to noise ratio based on the pick.
   :rtype: tuple


.. py:function:: calc_snr2(stream, loc)


.. py:function:: sub_calc_snr(data, pidx)


.. py:function:: calc_snr(stream, minloc)

   Calculate mean SNR for all Traces in a StationStream.

   :param stream: Stream containing waveforms.
   :type stream: StationStream
   :param minloc: Time in seconds since beginning of Trace.
   :type minloc: float

   :returns:     Ratio of signal window (minloc->end of trace) over
                 noise window (start of trace->minloc)
   :rtype: float


.. py:function:: pphase_pick(trace, period=None, damping=0.6, nbins=None, peak_selection=False)

   Compute P-phase arrival time.

   Adapted from Python code written by Francisco Hernandez of the Puerto Rico
   Strong Motion Program. That code was in turn adapted from Matlab code written by Dr. Erol
   Kalkan, P.E. The algorithms are described here in full:

   Kalkan, E. (2016). "An automatic P-phase arrival time picker", Bull. of
   Seismol. Soc. of Am., 106, No. 3, doi: 10.1785/0120150111

   :param trace: StationTrace containing waveform (acceleration or velocity) data.
   :type trace: StationTrace
   :param period: Undamped natural period of the sensor in seconds.
                  Defaults to 0.01s for sample rates >= 100, 0.1s for sample
                  rates < 100.
   :type period: float
   :param damping: Damping ratio.
   :type damping: float
   :param nbins: Histogram bin size (default is 2/sampling interval). Regional or
                 teleseismic records may need different values of bin size for
                 better picking results)
   :type nbins: int
   :param selection: One of:
                     Selector.TO_PEAK - take segment of waveform from beginning to absolute peak value (recommended for fast processing).
                     Selector.FULL - take full waveform.
   :type selection: Selector

   :returns:     - Float number of seconds from start of trace to P-Phase beginning.
                 - Signal-to-noise ratio in decibels
   :rtype: tuple


.. py:function:: _get_statelevel(y, n)


.. py:function:: create_travel_time_dataframe(streams, catalog_file, ddepth, ddist, model)

   Creates a travel time dataframe, which contains the phase arrrival times
   for each station the StreamCollection, for each event in the catalog.
   This uses an interpolation method to save time, and the fineness of the
   interpolation grid can be adjusted using the ddepth and ddist parameters.
   Using the recommended values of ddepth=5 and ddist=0.1 are generally
   sufficient to achieve less than 0.1 seconds of error in the travel times,
   for most cases.

   :param streams: Streams to calculate travel times for.
   :type streams: StreamCollection
   :param catalog_file: The path to the CSV file (from ComCat) which contains event info.
   :type catalog_file: str
   :param ddepth: The depth spacing (in km) for the interpolation grid.
                  Recommended value is 5 km.
   :type ddepth: float
   :param ddist: The distance spacing (in decimal degrees) for the interpolation
                 grid. Recommend value is 0.1 degrees.
   :type ddist: float

   Retuns:
       A tuple, containing the travel time dataframe and the catalog
       (list of ScalarEvent objects).


