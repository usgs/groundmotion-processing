:py:mod:`gmprocess.utils.usgs_id_cross_reference`
=================================================

.. py:module:: gmprocess.utils.usgs_id_cross_reference


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.utils.usgs_id_cross_reference.cross_reference_to_usgs_id
   gmprocess.utils.usgs_id_cross_reference.match_to_usgs_id
   gmprocess.utils.usgs_id_cross_reference.get_magnitude_range
   gmprocess.utils.usgs_id_cross_reference.parse_by_magnitude
   gmprocess.utils.usgs_id_cross_reference.plot_match_rate_by_mag
   gmprocess.utils.usgs_id_cross_reference.write_summary
   gmprocess.utils.usgs_id_cross_reference.set_target
   gmprocess.utils.usgs_id_cross_reference.set_buffer
   gmprocess.utils.usgs_id_cross_reference.find_events
   gmprocess.utils.usgs_id_cross_reference.calculate_error
   gmprocess.utils.usgs_id_cross_reference.match_percentage



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.utils.usgs_id_cross_reference.DELTA_MAG
   gmprocess.utils.usgs_id_cross_reference.DELTA_HOUR
   gmprocess.utils.usgs_id_cross_reference.DIST_SCALER
   gmprocess.utils.usgs_id_cross_reference.COORD_KM_SCALER
   gmprocess.utils.usgs_id_cross_reference.ERROR_THRESH


.. py:data:: DELTA_MAG
   :annotation: = 0.5

   

.. py:data:: DELTA_HOUR
   :annotation: = 12

   

.. py:data:: DIST_SCALER
   :annotation: = 20

   

.. py:data:: COORD_KM_SCALER
   :annotation: = 0.009

   

.. py:data:: ERROR_THRESH
   :annotation: = 1.0

   

.. py:function:: cross_reference_to_usgs_id(project_name, eqids, mags, times, lats, lons)

   Look for potential event matches for events in data and return
   a dictionary mapping the event IDs to the repsective match with the
   lowest error.
   :param project_name: Project or data source name.
   :type project_name: string
   :param eqids: Earthquake IDs of target events to be cross-referenced
   :type eqids: np.array
   :param mags: Magnitudes of target events to be cross-referenced.
   :type mags: np.array
   :param times: Times of target events to be cross-referenced.
   :type times: np.array
   :param lats: Latitudes of target events to be cross-referenced.
   :type lats: np.array
   :param lons: Longitudes of target events to be cross-referenced.
   :type lons: np.array


.. py:function:: match_to_usgs_id(eqids, mags, times, lats, lons)

   Look for potential event matches for events in data and return a
   dictionary mapping the event IDs to the repsective match with
   the lowest error.
   :param eqids: Earthquake IDs of target events to be cross-referenced
   :type eqids: np.array
   :param mags: Magnitudes of target events to be cross-referenced.
   :type mags: np.array
   :param times: Times of target events to be cross-referenced.
   :type times: np.array
   :param lats: Latitudes of target events to be cross-referenced.
   :type lats: np.array
   :param lons: Longitudes of target events to be cross-referenced.
   :type lons: np.array

   :returns: Map of target event IDs to dictionary
             of matching USGS ID and event attributes.
   :rtype: event_matches (dictionary)


.. py:function:: get_magnitude_range(magnitudes)

   Determine magnitude span of events trying to be matched.
   :param magnitudes: Array of event magnitudes.
   :type magnitudes: array

   :returns: Integer range of event magnitudes.
   :rtype: mag_range (list)


.. py:function:: parse_by_magnitude(eqids, magnitudes, mag_range, event_matches)

   Calculate the percentage of events in dataset that were matched with
   a corresponding USGS event and ID by magnitude.
   :param eqids: Earthquake IDs of target events to be cross-referenced
   :type eqids: np.array
   :param magnitudes: Magnitudes of target events to be cross-referenced.
   :type magnitudes: np.array
   :param mag_range: Integer range of event magnitudes.
   :type mag_range: list
   :param event_matches: Dictionary of data event IDs mapped to corresponding USGS event
                         IDs (if found).
   :type event_matches: dictionary

   :returns: List of event match percentages by magnitude.
   :rtype: mag_rates (list)


.. py:function:: plot_match_rate_by_mag(project_name, mag_range, mag_rates)

   Plot event match rate by magnitude.
   :param project_name: Project or data source name.
   :type project_name: string
   :param mag_range: Integer range of event magnitudes.
   :type mag_range: list
   :param mag_rates: List of percentages of events matched by magnitude.
   :type mag_rates: list


.. py:function:: write_summary(project_name, event_matches)

   Write cross-referenced target event and USGS event attributes
   to excel file.
   :param project_name: Project name or data source name.
   :type project_name: string
   :param event_matches: Map of target event ids to dictionary of matching
                         USGS ID and other event attributes.
   :type event_matches: dictionary


.. py:function:: set_target(mag, time, lat, lon)

   Map time, mag, and location values of target event to a dictionary.
   :param mag: Target event magnitude.
   :type mag: float
   :param time: Target event time.
   :type time: datetime
   :param lat: Target event latitude.
   :type lat: float
   :param lon: Target event longitude.
   :type lon: float

   :returns: Dictionary of target event magnitude,
             time, and location values.
   :rtype: targets (dictionary)


.. py:function:: set_buffer(target)

   Map time, mag, and distance buffers for event query and error
   calculation to a dictionary.
   :param target: Dictionary of target event mag, time, and
                  location values.
   :type target: dictionary

   :returns: Dictionary of time, magnitude,
             and distance buffers.
   :rtype: buffer (dictionary)


.. py:function:: find_events(target, buffer)

   Libcomcat query for potential matching events to the target.
   :param target: Dictionary of target event mag, time, and
                  location values.
   :type target: dictionary
   :param buffer: Dictionary of time, magnitude,
                  and distance buffers.
   :type buffer: dictionary

   :returns: List of Libcomcat SummaryEvents.
   :rtype: usgs_events (list)


.. py:function:: calculate_error(event, buffer, target)

   Find the squared distance, time, and magnitude error between a event
   and a target event.
   :param event: Libcomcat summary of event attributes.
   :type event: SummaryEvent
   :param buffer: Dictionary of time, magnitude, and distance buffers.
   :type buffer: dictionary
   :param target: Dictionary of target event mag, time, and
                  location values.
   :type target: dictionary

   :returns: Float (0-3) giving the total error
             between the proposed matching event and the target event.
   :rtype: total_error (float)


.. py:function:: match_percentage(eqids, event_matches)

   Calculate the percentage of events in dataset that were matched with
   a corresponding USGS event and ID.
   :param eqids: Array of target event (non-usgs) IDs.
   :type eqids: np.array
   :param event_matches: Map of target event ids to dictionary of matching
                         USGS ID and other event attributes.
   :type event_matches: dictionary

   :returns: Percent (0 to 1) of events matched.
   :rtype: rate (float)


