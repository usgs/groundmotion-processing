:py:mod:`gmprocess.utils.plot`
==============================

.. py:module:: gmprocess.utils.plot


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.utils.plot.plot_regression
   gmprocess.utils.plot.get_time_from_percent
   gmprocess.utils.plot.plot_arias
   gmprocess.utils.plot.plot_durations
   gmprocess.utils.plot.plot_moveout
   gmprocess.utils.plot.summary_plots
   gmprocess.utils.plot.plot_oscillators



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.utils.plot.MIN_MAG
   gmprocess.utils.plot.MAX_MAG
   gmprocess.utils.plot.DELTA_MAG
   gmprocess.utils.plot.BOTTOM
   gmprocess.utils.plot.AX1_LEFT
   gmprocess.utils.plot.AX1_WIDTH
   gmprocess.utils.plot.AX1_HEIGHT
   gmprocess.utils.plot.AX2_WIDTH
   gmprocess.utils.plot.AX2_HEIGHT


.. py:data:: MIN_MAG
   :annotation: = 4.0

   

.. py:data:: MAX_MAG
   :annotation: = 7.0

   

.. py:data:: DELTA_MAG
   :annotation: = 0.5

   

.. py:data:: BOTTOM
   :annotation: = 0.1

   

.. py:data:: AX1_LEFT
   :annotation: = 0.1

   

.. py:data:: AX1_WIDTH
   :annotation: = 0.8

   

.. py:data:: AX1_HEIGHT
   :annotation: = 0.8

   

.. py:data:: AX2_WIDTH
   :annotation: = 0.1

   

.. py:data:: AX2_HEIGHT
   :annotation: = 1.0

   

.. py:function:: plot_regression(event_table, imc, imc_table, imt, filename, distance_metric='EpicentralDistance', colormap='viridis')

   Make summary "regression" plot.

   .. todo::

      * Add GMPE curve and compute mean/sd for all the observations
        and then also report the standardized residuals.
      * Better definitions of column names and units.


.. py:function:: get_time_from_percent(NIa, p, dt)

   Find the closest value to the desired percent of Arias intensity and
   calculate the duration time associated with the percent.

   :param NIa: Array of normalized Arias intensity values with respect to time.
   :type NIa: array
   :param p: Percent (0 to 1) of Arias Intensity.
   :type p: float
   :param dt: Time in between each record in s.
   :type dt: float

   :returns: Duration time to reach specified percent of Arias
             intensity.
   :rtype: time (float)


.. py:function:: plot_arias(stream, axes=None, axis_index=None, figsize=None, file=None, minfontsize=14, show=False, show_maximum=True, title=None, xlabel=None, ylabel=None)

   Create plots of arias intensity.

   :param stream: Set of acceleration data with units of gal (cm/s/s).
   :type stream: obspy.core.stream.Stream
   :param axes: Array of subplots. Default is None.
   :type axes: ndarray
   :param axis_index: First index of axes array to plot the traces. Default is None.
                      Required if axes is not None.
   :type axis_index: int
   :param figsize: Tuple of height and width. Default is None.
   :type figsize: tuple
   :param file: File where the image will be saved. Default is None.
   :type file: str
   :param minfontsize: Minimum font size. Default is 14.
   :type minfontsize: int
   :param show: Plot the figure. Default is False.
   :type show: bool
   :param show_maximum: Show the maximum value.
   :type show_maximum: bool
   :param title: Title for plot. Default is None.
   :type title: str
   :param xlabel: Label for x axis. Default is None.
   :type xlabel: str
   :param ylabel: Label for y axis. Default is None.
   :type ylabel: str

   :returns: Array of matplotlib.axes._subplots.AxesSubplot.
   :rtype: numpy.ndarray


.. py:function:: plot_durations(stream, durations, axes=None, axis_index=None, figsize=None, file=None, minfontsize=14, show=False, title=None, xlabel=None, ylabel=None)

   Create plots of durations.

   :param stream: Set of acceleration data with units of gal (cm/s/s).
   :type stream: obspy.core.stream.Stream
   :param durations: List of percentage minimum and maximums (tuple).
   :type durations: list
   :param axes: Array of subplots. Default is None.
   :type axes: ndarray
   :param axis_index: First index of axes array to plot the traces. Default is None.
                      Required if axes is not None.
   :type axis_index: int
   :param figsize: Tuple of height and width. Default is None.
   :type figsize: tuple
   :param file: File where the image will be saved. Default is None.
   :type file: str
   :param show: Plot the figure. Default is False.
   :type show: bool
   :param title: Title for plot. Default is None.
   :type title: str
   :param xlabel: Label for x axis. Default is None.
   :type xlabel: str
   :param ylabel: Label for y axis. Default is None.
   :type ylabel: str

   :returns: Array of matplotlib.axes._subplots.AxesSubplot.
   :rtype: numpy.ndarray


.. py:function:: plot_moveout(streams, epilat, epilon, orientation=None, max_dist=None, figsize=(10, 15), file=None, minfontsize=14, normalize=True, factor=0.2, alpha=0.25)

   Create moveout plot.

   :param streams: StreamCollection of acceleration data with units of gal (cm/s/s).
   :type streams: StreamCollection
   :param epilat: Epicenter latitude.
   :type epilat: float
   :param epilon: Epicenter longitude.
   :type epilon: float
   :param orientation: Orientation code (str) of each stream to view. Default is None.
                       If None, then the orientation code with the highest number of
                       traces will be used.
   :type orientation: str
   :param max_dist: Maximum distance (in km) to plot. Default is 200 km.
   :type max_dist: float
   :param figsize: Tuple of height and width. Default is (10, 15).
   :type figsize: tuple
   :param file: File where the image will be saved. Default is None.
   :type file: str
   :param minfontsize: Minimum font size. Default is 14.
   :type minfontsize: int
   :param normalize: Normalize the data. Default is True.
   :type normalize: bool
   :param factor: Factor for scaling the trace. Default is 0.2, meaning that the
                  trace with the greatest amplitude variation will occupy 20% of the
                  vertical space in the plot.
   :type factor: int, float
   :param alpha: Alpha value for plotting the traces.
   :type alpha: float

   :returns: (Figure, matplotlib.axes._subplots.AxesSubplot)
   :rtype: tuple


.. py:function:: summary_plots(st, directory, origin)

   Stream summary plot.

   :param st: Stream of data.
   :type st: gmprocess.core.stationtrace.StationStream
   :param directory: Directory for saving plots.
   :type directory: str
   :param origin: Flattened subclass of Obspy Event.
   :type origin: ScalarEvent


.. py:function:: plot_oscillators(st, periods=[0.1, 2, 5, 10], file=None, show=False)

   Produces a figure of the oscillator responses for a StationStream. The
   figure will plot the acceleration traces in the first row, and then an
   additional row for each oscillator period. The number of columns is the
   number of channels in the stream.

   :param st: StaionStream of data.
   :type st: gmprocess.core.stationstream.StationStream
   :param periods: A list of periods (floats, in seconds).
   :type periods: list
   :param file: File where the image will be saved. Default is None.
   :type file: str
   :param show: Show the figure. Default is False.
   :type show: bool


