:py:mod:`gmprocess.io.obspy.core`
=================================

.. py:module:: gmprocess.io.obspy.core


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.io.obspy.core._get_station_file
   gmprocess.io.obspy.core.is_obspy
   gmprocess.io.obspy.core.read_obspy



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.io.obspy.core.IGNORE_FORMATS
   gmprocess.io.obspy.core.EXCLUDE_PATTERNS
   gmprocess.io.obspy.core.REQUIRES_XML
   gmprocess.io.obspy.core.RE_NETWORK
   gmprocess.io.obspy.core.LOCATION_CODES


.. py:data:: IGNORE_FORMATS
   :annotation: = ['KNET']

   

.. py:data:: EXCLUDE_PATTERNS
   :annotation: = ['*.*.??.LN?']

   

.. py:data:: REQUIRES_XML
   :annotation: = ['MSEED']

   

.. py:data:: RE_NETWORK
   

   

.. py:data:: LOCATION_CODES
   

   

.. py:function:: _get_station_file(filename, stream, metadata_directory)


.. py:function:: is_obspy(filename, config=None)

   Check to see if file is a format supported by Obspy (not KNET).

   Note: Currently only SAC and Miniseed are supported.

   :param filename: Path to possible Obspy format.
   :type filename: str
   :param config: Dictionary containing configuration.
   :type config: dict

   :returns: True if obspy supported, otherwise False.
   :rtype: bool


.. py:function:: read_obspy(filename, config=None, **kwargs)

   Read Obspy data file (SAC and MiniSEED currently supported).

   :param filename: Path to data file.
   :type filename: str
   :param config: Dictionary containing configuration. If None, retrieve global config.
   :type config: dict
   :param kwargs: Other arguments will be ignored.
   :type kwargs: ref

   :returns: StationStream object.
   :rtype: Stream


