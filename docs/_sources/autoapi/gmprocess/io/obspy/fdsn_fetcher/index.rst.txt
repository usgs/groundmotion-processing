:py:mod:`gmprocess.io.obspy.fdsn_fetcher`
=========================================

.. py:module:: gmprocess.io.obspy.fdsn_fetcher


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.io.obspy.fdsn_fetcher.FDSNFetcher




Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.io.obspy.fdsn_fetcher.OBSPY_LOGGER
   gmprocess.io.obspy.fdsn_fetcher.GEONET_ARCHIVE_DAYS
   gmprocess.io.obspy.fdsn_fetcher.GEONET_ARCHIVE_URL
   gmprocess.io.obspy.fdsn_fetcher.GEO_NET_ARCHIVE_KEY
   gmprocess.io.obspy.fdsn_fetcher.GEONET_REALTIME_URL
   gmprocess.io.obspy.fdsn_fetcher.BAD_PROVIDERS


.. py:data:: OBSPY_LOGGER
   :annotation: = obspy.clients.fdsn.mass_downloader

   

.. py:data:: GEONET_ARCHIVE_DAYS
   

   

.. py:data:: GEONET_ARCHIVE_URL
   :annotation: = http://service.geonet.org.nz

   

.. py:data:: GEO_NET_ARCHIVE_KEY
   :annotation: = GEONET

   

.. py:data:: GEONET_REALTIME_URL
   :annotation: = http://service-nrt.geonet.org.nz

   

.. py:data:: BAD_PROVIDERS
   :annotation: = ['IRISPH5', 'UIB-NORSAR']

   

.. py:class:: FDSNFetcher(time, lat, lon, depth, magnitude, config=None, rawdir=None, drop_non_free=True, stream_collection=True)

   Bases: :py:obj:`gmprocess.io.fetcher.DataFetcher`

   .. py:attribute:: BOUNDS
      

      

   .. py:method:: getMatchingEvents(solve=True)

      Return a list of dictionaries matching input parameters.

      :param solve: If set to True, then this method
                    should return a list with a maximum of one event.
      :type solve: bool

      :returns:

                List of event dictionaries, with fields:
                      - time Event time (UTC)
                      - lat Event latitude
                      - lon Event longitude
                      - depth Event depth
                      - mag Event magnitude
      :rtype: list


   .. py:method:: retrieveData()

      Retrieve data from many FDSN services, turn into StreamCollection.

      :param event: Best dictionary matching input event, fields as above
                    in return of getMatchingEvents().
      :type event: dict

      :returns: StreamCollection object.
      :rtype: StreamCollection



