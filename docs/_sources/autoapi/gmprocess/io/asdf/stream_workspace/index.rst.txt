:py:mod:`gmprocess.io.asdf.stream_workspace`
============================================

.. py:module:: gmprocess.io.asdf.stream_workspace


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.io.asdf.stream_workspace.StreamWorkspace



Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.io.asdf.stream_workspace.format_netsta
   gmprocess.io.asdf.stream_workspace.format_nslc
   gmprocess.io.asdf.stream_workspace.format_nslct
   gmprocess.io.asdf.stream_workspace.format_nslit
   gmprocess.io.asdf.stream_workspace._stringify_dict
   gmprocess.io.asdf.stream_workspace._get_id
   gmprocess.io.asdf.stream_workspace._get_agents
   gmprocess.io.asdf.stream_workspace._natural_keys
   gmprocess.io.asdf.stream_workspace._atof
   gmprocess.io.asdf.stream_workspace.camel_case_split



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.io.asdf.stream_workspace.TIMEPAT
   gmprocess.io.asdf.stream_workspace.EVENT_TABLE_COLUMNS
   gmprocess.io.asdf.stream_workspace.FLATFILE_COLUMNS
   gmprocess.io.asdf.stream_workspace.FLATFILE_IMT_COLUMNS
   gmprocess.io.asdf.stream_workspace.FIT_SPECTRA_COLUMNS
   gmprocess.io.asdf.stream_workspace.SNR_COLUMNS
   gmprocess.io.asdf.stream_workspace.SNR_FREQ_COLUMNS
   gmprocess.io.asdf.stream_workspace.M_PER_KM
   gmprocess.io.asdf.stream_workspace.FORMAT_VERSION


.. py:data:: TIMEPAT
   :annotation: = [0-9]{4}-[0-9]{2}-[0-9]{2}T

   

.. py:data:: EVENT_TABLE_COLUMNS
   :annotation: = ['id', 'time', 'latitude', 'longitude', 'depth', 'magnitude', 'magnitude_type']

   

.. py:data:: FLATFILE_COLUMNS
   

   

.. py:data:: FLATFILE_IMT_COLUMNS
   

   

.. py:data:: FIT_SPECTRA_COLUMNS
   

   

.. py:data:: SNR_COLUMNS
   

   

.. py:data:: SNR_FREQ_COLUMNS
   

   

.. py:data:: M_PER_KM
   :annotation: = 1000

   

.. py:data:: FORMAT_VERSION
   :annotation: = 1.0

   

.. py:function:: format_netsta(stats)


.. py:function:: format_nslc(stats)


.. py:function:: format_nslct(stats, tag)


.. py:function:: format_nslit(stats, inst, tag)


.. py:class:: StreamWorkspace(filename, compression=None)

   Bases: :py:obj:`object`

   .. py:method:: create(cls, filename, compression=None)
      :classmethod:

      Load from existing ASDF file.

      :param filename: Path to existing ASDF file.
      :type filename: str
      :param compression: Any value supported by pyasdf.asdf_data_set.ASDFDataSet.
      :type compression: str

      :returns: Object containing ASDF file.
      :rtype: StreamWorkspace


   .. py:method:: open(cls, filename)
      :classmethod:

      Load from existing ASDF file.

      :param filename: Path to existing ASDF file.
      :type filename: str

      :returns: Object containing ASDF file.
      :rtype: StreamWorkspace


   .. py:method:: close(self)

      Close the workspace.




   .. py:method:: __repr__(self)

      Provide summary string representation of the file.

      :returns: Summary string representation of the file.
      :rtype: str


   .. py:method:: addEvent(self, event)

      Add event object to file.

      :param event: Obspy event object.
      :type event: Event


   .. py:method:: addConfig(self)

      Add config to an ASDF file.




   .. py:method:: addGmprocessVersion(self, version)

      Add gmprocess version to an ASDF file.




   .. py:method:: getGmprocessVersion(self)

      Get gmprocess version from ASDF file.




   .. py:method:: addStreams(self, event, streams, label=None, gmprocess_version='unknown')

      Add a sequence of StationStream objects to an ASDF file.

      :param event: Obspy event object.
      :type event: Event
      :param streams: List of StationStream objects.
      :type streams: list
      :param label: Label to attach to stream sequence. Cannot contain an
                    underscore.
      :type label: str
      :param gmprocess_version: gmprocess version.
      :type gmprocess_version: str


   .. py:method:: getEventIds(self)

      Return list of event IDs for events in ASDF file.

      :returns: List of eventid strings.
      :rtype: list


   .. py:method:: getLabels(self)

      Return all of the processing labels.

      :returns: List of processing labels.
      :rtype: list


   .. py:method:: getStreams(self, eventid, stations=None, labels=None, config=None)

      Get Stream from ASDF file given event id and input tags.

      :param eventid: Event ID corresponding to an Event in the workspace.
      :type eventid: str
      :param stations: List of stations (<nework code>.<station code>) to search for.
      :type stations: list
      :param labels: List of processing labels to search for.
      :type labels: list
      :param config: Configuration options.
      :type config: dict

      :returns: Object containing list of organized
                StationStreams.
      :rtype: StreamCollection


   .. py:method:: getStations(self)

      Get list of station codes within the file.

      :returns: List of station codes contained in workspace.
      :rtype: list


   .. py:method:: insert_aux(self, datastr, data_name, path, overwrite=False)

      Insert a string (usually json or xml) into Auxilliary array.

      :param datastr: String containing data to insert into Aux array.
      :type datastr: str
      :param data_name: What this data should be called in the ASDF file.
      :type data_name: str
      :param path: The aux path where this data should be stored.
      :type path: str
      :param overwrite: Should the data be overwritten if it already exists?
      :type overwrite: bool


   .. py:method:: calcMetrics(self, eventid, stations=None, labels=None, config=None, streams=None, stream_label=None, rupture_file=None, calc_station_metrics=True, calc_waveform_metrics=True)

      Calculate waveform and/or station metrics for a set of waveforms.

      :param eventid: ID of event to search for in ASDF file.
      :type eventid: str
      :param stations: List of stations to create metrics for.
      :type stations: list
      :param labels: List of processing labels to create metrics for.
      :type labels: list
      :param config: Configuration dictionary.
      :type config: dict
      :param streams: Optional StreamCollection object to create metrics for.
      :type streams: StreamCollection
      :param stream_label: Label to be used in the metrics path when providing a
                           StreamCollection.
      :type stream_label: str
      :param rupture_file: Path pointing to the rupture file.
      :type rupture_file: str
      :param calc_station_metrics: Whether to calculate station metrics. Default is True.
      :type calc_station_metrics: bool
      :param calc_waveform_metrics: Whether to calculate waveform metrics. Default is True.
      :type calc_waveform_metrics: bool


   .. py:method:: getTables(self, label, config)

      Retrieve dataframes containing event information and IMC/IMT
      metrics.

      :param label: Calculate metrics only for the given label.
      :type label: str
      :param config: Config options.
      :type config: dict

      :returns:

                Elements are:
                       - pandas DataFrame containing event information:
                         - id Event ID
                         - time Time of origin
                         - latitude Latitude of origin
                         - longitude Longitude of origin
                         - depth Depth of origin (km)
                         - magnitude Magnitude at origin (km)
                         - magnitude_type Magnitude type at origin
                       - dictionary of DataFrames, where keys are IMCs and
                         values are DataFrames with columns:
                         - EarthquakeId Earthquake id from event table
                         - Network Network code
                         - StationCode Station code
                         - StationDescription Long form description of station
                           location (may be blank)
                         - StationLatitude Station latitude
                         - StationLongitude Station longitude
                         - StationElevation Station elevation
                         - SamplingRate Data sampling rate in Hz
                         - EpicentralDistance Distance from origin epicenter
                           (surface) to station
                         - HypocentralDistance Distance from origin hypocenter
                           (depth) to station
                         - H1Lowpass Low pass filter corner frequency for first
                           horizontal channel
                         - H1Highpass High pass filter corner frequency for first
                           horizontal channel
                         - H2Lowpass Low pass filter corner frequency for second
                           horizontal channel
                         - H2Highpass High pass filter corner frequency for
                           second horizontal channel
                         - ...desired IMTs (PGA, PGV, SA(0.3), etc.)
                       - dictionary of README DataFrames, where keys are IMCs
                         and values are DataFrames with columns:
                         - Column header
                         - Description
      :rtype: tuple


   .. py:method:: getFitSpectraTable(self, eventid, label, config)

      Returns a tuple of two pandas DataFrames. The first contains the
      fit_spectra parameters for each trace in the workspace matching
      eventid and label. The second is a README describing each column
      in the first DataFrame.

      :param eventid: Return parameters only for the given eventid.
      :type eventid: str
      :param label: Return parameters only for the given label.
      :type label: str
      :param config: Dictionary of config options.
      :type config: dict

      :returns:     A DataFrame containing the fit_spectra parameters on a trace-
                    by-trace basis.
      :rtype: pandas.DataFrame


   .. py:method:: getSNRTable(self, eventid, label, config)

      Returns a tuple of two pandas DataFrames. The first contains the
      fit_spectra parameters for each trace in the workspace matching
      eventid and label. The second is a README describing each column
      in the first DataFrame.

      :param eventid: Return parameters only for the given eventid.
      :type eventid: str
      :param label: Return parameters only for the given label.
      :type label: str
      :param config: Dictionary of config options.
      :type config: dict

      :returns:     A DataFrame containing the fit_spectra parameters on a trace-
                    by-trace basis.
      :rtype: pandas.DataFrame


   .. py:method:: __flatten_snr_dict(tr, periods)
      :staticmethod:


   .. py:method:: getStreamMetrics(self, eventid, network, station, label, streams=None, stream_label=None, config=None)

      Extract a StationSummary object from the ASDF file for a given
      input Stream.

      :param eventid: ID of event to search for in ASDF file.
      :type eventid: str
      :param network: Network to return metrics from.
      :type network: str
      :param station: Station to return metrics from.
      :type station: str
      :param label: Processing label to return metrics from.
      :type label: str
      :param streams: Optional StreamCollection object to get metrics for.
      :type streams: StreamCollection
      :param stream_label: Label to be used in the metrics path when providing a
                           StreamCollection.
      :type stream_label: str
      :param config: Configuration options.
      :type config: dict

      :returns: Object containing all stream metrics or None.
      :rtype: StationSummary


   .. py:method:: summarizeLabels(self)

      Summarize the processing metadata associated with each label in the
      file.

      :returns:

                    Pandas DataFrame with columns:
                        - Label Processing label.
                        - UserID user id (i.e., jsmith)
                        - UserName Full user name (i.e., Jane Smith) (optional)
                        - UserEmail Email adress (i.e., jsmith@awesome.org)
                          (optional)
                        - Software Name of processing software (i.e., gmprocess)
                        - Version Version of software (i.e., 1.4)
      :rtype: DataFrame


   .. py:method:: getInventory(self, eventid)

      Get an Obspy Inventory object from the ASDF file.

      :param eventid: ID of event to search for in ASDF file.
      :type eventid: str

      :returns:

                Obspy inventory object capturing all of the
                           networks, stations, and channels contained in file.
      :rtype: Inventory


   .. py:method:: hasEvent(self, eventid)

      Verify that the workspace file contains an event matching eventid.

      :param eventid: ID of event to search for in ASDF file.
      :type eventid: str

      :returns: True if event matching ID is found, False if not.
      :rtype: bool


   .. py:method:: getEvent(self, eventid)

      Get a ScalarEvent object from the ASDF file.

      :param eventid: ID of event to search for in ASDF file.
      :type eventid: str

      :returns:     Flattened version of Obspy Event object.
      :rtype: ScalarEvent


   .. py:method:: getProvenance(self, eventid, stations=None, labels=None)

      Return DataFrame with processing history matching input criteria.

              Output will look like this:
              Record  Processing Step     Step Attribute              Attribute Value
      0  NZ.HSES.HN1  Remove Response        input_units                       counts
      1  NZ.HSES.HN1  Remove Response       output_units                       cm/s^2
      2  NZ.HSES.HN1          Detrend  detrending_method                       linear
      3  NZ.HSES.HN1          Detrend  detrending_method                       demean
      4  NZ.HSES.HN1              Cut       new_end_time  2016-11-13T11:05:44.000000Z
      5  NZ.HSES.HN1              Cut     new_start_time  2016-11-13T11:02:58.000000Z
      6  NZ.HSES.HN1            Taper               side                         both
      7  NZ.HSES.HN1            Taper        taper_width                         0.05
      8  NZ.HSES.HN1            Taper        window_type                         Hann
      ...

              Args:
                  eventid (str):
                      Event ID corresponding to an Event in the workspace.
                  stations (list):
                      List of stations to search for.
                  labels (list):
                      List of processing labels to search for.

              Returns:
                  DataFrame:
                      Table of processing steps/parameters (see above).





.. py:function:: _stringify_dict(indict)


.. py:function:: _get_id(event)


.. py:function:: _get_agents(provdoc)


.. py:function:: _natural_keys(text)

   Helper function for sorting IMT list. This is needed because using the
   plain .sort() will put SA(10.0) before SA(2.0), for example.


.. py:function:: _atof(text)


.. py:function:: camel_case_split(identifier)


