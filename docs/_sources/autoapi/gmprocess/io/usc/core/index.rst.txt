:py:mod:`gmprocess.io.usc.core`
===============================

.. py:module:: gmprocess.io.usc.core


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.io.usc.core.is_usc
   gmprocess.io.usc.core._check_header
   gmprocess.io.usc.core.read_usc
   gmprocess.io.usc.core.read_volume_one
   gmprocess.io.usc.core._read_channel
   gmprocess.io.usc.core._get_header_info
   gmprocess.io.usc.core._dms2dd
   gmprocess.io.usc.core._get_units



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.io.usc.core.VOLUMES
   gmprocess.io.usc.core.USC_ORIENTATIONS


.. py:data:: VOLUMES
   

   

.. py:data:: USC_ORIENTATIONS
   

   

.. py:function:: is_usc(filename, config=None, **kwargs)

   Check to see if file is a USC strong motion file.

   :param filename: Path to possible USC V1 data file.
   :type filename: str
   :param config: Dictionary containing configuration.
   :type config: dict
   :param kwargs: Other arguments will be ignored.
   :type kwargs: ref

   :returns: True if USC, False otherwise.
   :rtype: bool


.. py:function:: _check_header(start, stop, filename)


.. py:function:: read_usc(filename, config=None, **kwargs)

   Read USC V1 strong motion file.

   :param filename: Path to possible USC V1 data file.
   :type filename: str
   :param config: Dictionary containing configuration.
   :type config: dict
   :param kwargs: Ignored by this function.
   :type kwargs: ref

   :returns: Obspy Stream containing three channels of acceleration data
             (cm/s**2).
   :rtype: Stream


.. py:function:: read_volume_one(filename, location='', alternate=False, config=None)

   Read channel data from USC volume 1 text file.

   :param filename: Input DMG V1 filename.
   :type filename: str
   :param config: Config options.
   :type config: dict

   :returns: (list of obspy Trace, int line offset)
   :rtype: tuple


.. py:function:: _read_channel(filename, line_offset, volume, location='', alternate=False)

   Read channel data from USC V1 text file.

   :param filename: Input USC V1 filename.
   :type filename: str
   :param line_offset: Line offset to beginning of channel text block.
   :type line_offset: int
   :param volume: Dictionary of formatting information.
   :type volume: dictionary

   :returns: (obspy Trace, int line offset)
   :rtype: tuple


.. py:function:: _get_header_info(int_data, flt_data, lines, volume, location='')

   Return stats structure from various headers.

   Output is a dictionary like this:
    - network (str): 'LA'
    - station (str)
    - channel (str): Determined using COSMOS_ORIENTATIONS
    - location (str): Default is '--'
    - starttime (datetime)
    - duration (float)
    - sampling_rate (float)
    - npts (int)
    - coordinates:
      - latitude (float)
      - longitude (float)
      - elevation (float)
   - standard (Defaults are either np.nan or '')
     - horizontal_orientation (float): Rotation from north (degrees)
     - instrument_period (float): Period of sensor (Hz)
     - instrument_damping (float): Fraction of critical
     - process_time (datetime): Reported date of processing
     - process_level: Either 'V0', 'V1', 'V2', or 'V3'
     - station_name (str): Long form station description
     - sensor_serial_number (str): Reported sensor serial
     - instrument (str): See SENSOR_TYPES
     - comments (str): Processing comments
     - structure_type (str): See BUILDING_TYPES
     - corner_frequency (float): Sensor corner frequency (Hz)
     - units (str): See UNITS
     - source (str): Network source description
     - source_format (str): Always cosmos
   - format_specific
     - fractional_unit (float): Units of digitized acceleration
           in file (fractions of g)

   :param int_data: Array of integer data
   :type int_data: ndarray
   :param flt_data: Array of float data
   :type flt_data: ndarray
   :param lines: List of text headers (str)
   :type lines: list

   :returns: Dictionary of header/metadata information
   :rtype: dictionary


.. py:function:: _dms2dd(degrees, minutes, seconds)

   Helper method for converting degrees, minutes, seconds to decimal.

   :param degrees: Lat/Lon degrees.
   :type degrees: int
   :param minutes: Lat/Lon minutes.
   :type minutes: int
   :param seconds: Lat/Lon seconds.
   :type seconds: int

   :returns: Lat/Lon in decimal degrees
   :rtype: float


.. py:function:: _get_units(line)

   Parse units from a text line.

   :param line: Text line which should contain units.
   :type line: str


