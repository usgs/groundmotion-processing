:py:mod:`gmprocess.io.fetcher`
==============================

.. py:module:: gmprocess.io.fetcher


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.io.fetcher.DataFetcher



Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.io.fetcher._get_first_value



.. py:class:: DataFetcher(time, lat, lon, depth, magnitude, user=None, password=None, radius=100, dt=16, ddepth=30, dmag=0.3, rawdir=None, config=None, drop_non_free=True, stream_collection=True)

   Bases: :py:obj:`object`

   .. py:method:: getMatchingEvents(self, solve=True)

      For appropriate fetchers, return a list of dictionaries matching
      input parameters.

      :param solve: If set to True, then this method should return a list with
                    a maximum of one event.
      :type solve: bool

      :returns:

                List of event dictionaries, with fields:
                      - time Event time (UTC)
                      - lat Event latitude
                      - lon Event longitude
                      - depth Event depth
                      - mag Event magnitude
      :rtype: list


   .. py:method:: retrieveData(self, event)

      Retrieve data from remote source, turn into StreamCollection.

      :param event: Best dictionary matching input event, fields as above
                    in return of getMatchingEvents().
      :type event: dict

      :returns: StreamCollection object.
      :rtype: StreamCollection


   .. py:method:: solveEvents(self, events)

      Reduce a list of events down to one that best matches the input.

      :param events: List of dictionaries with fields:
                     - time Event time (UTC)
                     - lat Event latitude
                     - lon Event longitude
                     - depth Event depth
                     - mag Event magnitude
      :type events: list

      :returns: Event dictionary (see above)
      :rtype: dict



.. py:function:: _get_first_value(val1, val2, val3)


