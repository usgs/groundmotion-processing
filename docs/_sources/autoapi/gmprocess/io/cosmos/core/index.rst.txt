:py:mod:`gmprocess.io.cosmos.core`
==================================

.. py:module:: gmprocess.io.cosmos.core


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.io.cosmos.core.is_cosmos
   gmprocess.io.cosmos.core.read_cosmos
   gmprocess.io.cosmos.core._read_channel
   gmprocess.io.cosmos.core._get_header_info
   gmprocess.io.cosmos.core._check_assign
   gmprocess.io.cosmos.core._read_lines



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.io.cosmos.core.MICRO_TO_VOLT
   gmprocess.io.cosmos.core.MSEC_TO_SEC
   gmprocess.io.cosmos.core.TEXT_HDR_ROWS
   gmprocess.io.cosmos.core.VALID_MARKERS
   gmprocess.io.cosmos.core.code_file
   gmprocess.io.cosmos.core.CODES
   gmprocess.io.cosmos.core.BUILDING_TYPES
   gmprocess.io.cosmos.core.COSMOS_NETWORKS
   gmprocess.io.cosmos.core.COSMOS_ORIENTATIONS
   gmprocess.io.cosmos.core.VALID_AZIMUTH_INTS
   gmprocess.io.cosmos.core.FILTERS
   gmprocess.io.cosmos.core.PHYSICAL_UNITS
   gmprocess.io.cosmos.core.UNITS
   gmprocess.io.cosmos.core.SENSOR_TYPES


.. py:data:: MICRO_TO_VOLT
   :annotation: = 1000000.0

   

.. py:data:: MSEC_TO_SEC
   

   

.. py:data:: TEXT_HDR_ROWS
   :annotation: = 14

   

.. py:data:: VALID_MARKERS
   :annotation: = ['CORRECTED ACCELERATION', 'UNCORRECTED ACCELERATION', 'RAW ACCELERATION COUNTS']

   

.. py:data:: code_file
   

   

.. py:data:: CODES
   

   

.. py:data:: BUILDING_TYPES
   

   

.. py:data:: COSMOS_NETWORKS
   

   

.. py:data:: COSMOS_ORIENTATIONS
   

   

.. py:data:: VALID_AZIMUTH_INTS
   

   

.. py:data:: FILTERS
   

   

.. py:data:: PHYSICAL_UNITS
   

   

.. py:data:: UNITS
   

   

.. py:data:: SENSOR_TYPES
   

   

.. py:function:: is_cosmos(filename, config=None)

   Check to see if file is a COSMOS V0/V1 strong motion file.

   :param filename: Path to possible COSMOS V0/V1 data file.
   :type filename: str
   :param config: Dictionary containing configuration.
   :type config: dict

   :returns: True if COSMOS V0/V1, False otherwise.
   :rtype: bool


.. py:function:: read_cosmos(filename, config=None, **kwargs)

   Read COSMOS V1/V2 strong motion file.

   There is one extra key in the Stats object for each Trace -
   "process_level". This will be set to either "V1" or "V2".

   :param filename: Path to possible COSMOS V1/V2 data file.
   :type filename: str
   :param config: Dictionary containing configuration.
   :type config: dict
   :param kwargs:
                  valid_station_types (list): List of valid station types. See table
                      6  in the COSMOS strong motion data format documentation for
                      station type codes.
                  Other arguments will be ignored.
   :type kwargs: ref

   :returns: List of StationStreams containing three channels of acceleration
             data (cm/s**2).
   :rtype: list


.. py:function:: _read_channel(filename, line_offset, location='')

   Read channel data from COSMOS V1/V2 text file.

   :param filename: Input COSMOS V1/V2 filename.
   :type filename: str
   :param line_offset: Line offset to beginning of channel text block.
   :type line_offset: int

   :returns: (obspy Trace, int line offset)
   :rtype: tuple


.. py:function:: _get_header_info(int_data, flt_data, lines, cmt_data, location='')

   Return stats structure from various headers.

   Output is a dictionary like this:
    - network (str): Default is '--'. Determined using COSMOS_NETWORKS
    - station (str)
    - channel (str): Determined using COSMOS_ORIENTATIONS
    - location (str): Set to location index of sensor site at station.
           If not a multi-site array, default is '--'.
    - starttime (datetime)
    - duration (float)
    - sampling_rate (float)
    - delta (float)
    - npts (int)
    - coordinates:
      - latitude (float)
      - longitude (float)
      - elevation (float)
   - standard (Defaults are either np.nan or '')
     - horizontal_orientation (float): Rotation from north (degrees)
     - instrument_period (float): Period of sensor (Hz)
     - instrument_damping (float): Fraction of critical
     - process_time (datetime): Reported date of processing
     - process_level: Either 'V0', 'V1', 'V2', or 'V3'
     - station_name (str): Long form station description
     - sensor_serial_number (str): Reported sensor serial
     - instrument (str): See SENSOR_TYPES
     - comments (str): Processing comments
     - structure_type (str): See BUILDING_TYPES
     - corner_frequency (float): Sensor corner frequency (Hz)
     - units (str): See UNITS
     - source (str): Network source description
     - source_format (str): Always cosmos
   - format_specific
     - physical_units (str): See PHYSICAL_UNITS
     - v30 (float): Site geology V30 (km/s)
     - least_significant_bit: Recorder LSB in micro-volts (uv/count)
     - low_filter_type (str): Filter used for low frequency
           V2 filtering (see FILTERS)
     - low_filter_corner (float): Filter corner for low frequency
           V2 filtering (Hz)
     - low_filter_decay (float): Filter decay for low frequency
           V2 filtering (dB/octabe)
     - high_filter_type (str): Filter used for high frequency
           V2 filtering (see FILTERS)
     - high_filter_corner (float): Filter corner for high frequency
           V2 filtering (Hz)
     - high_filter_decay (float): Filter decay for high frequency
           V2 filtering (dB/octabe)
     - maximum (float): Maximum value
     - maximum_time (float): Time at which maximum occurs
     - station_code (int): Code for structure_type
     - record_flag (str): Either 'No problem', 'Fixed', 'Unfixed problem'.
           Should be described in more depth in comments.
     - scaling_factor (float): Scaling used for converting acceleration
           from g/10 to cm/s/s
     - sensor_sensitivity (float): Sensitvity in volts/g

   :param int_data: Array of integer data.
   :type int_data: ndarray
   :param flt_data: Array of float data.
   :type flt_data: ndarray
   :param lines: List of text headers (str).
   :type lines: list
   :param cmt_data: Array of comments (str).
   :type cmt_data: ndarray

   :returns: Dictionary of header/metadata information
   :rtype: dictionary


.. py:function:: _check_assign(value, unknown, default)

   Check for the unknown flag and return the correct value.


.. py:function:: _read_lines(skip_rows, filename)

   Read lines of comments and data exluding headers.

   :param skip_rows: Number of rows to skip.
   :type skip_rows: int
   :param filename: Path to possible COSMOS V0/V1 data file.
   :type filename: str

   :returns: List of comments or array of data.
   :rtype: array-like


