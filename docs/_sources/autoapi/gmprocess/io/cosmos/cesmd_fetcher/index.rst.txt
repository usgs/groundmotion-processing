:py:mod:`gmprocess.io.cosmos.cesmd_fetcher`
===========================================

.. py:module:: gmprocess.io.cosmos.cesmd_fetcher


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.io.cosmos.cesmd_fetcher.CESMDFetcher




Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.io.cosmos.cesmd_fetcher.STATION_RADIUS
   gmprocess.io.cosmos.cesmd_fetcher.EQ_RADIUS
   gmprocess.io.cosmos.cesmd_fetcher.EQ_DT
   gmprocess.io.cosmos.cesmd_fetcher.DDEPTH
   gmprocess.io.cosmos.cesmd_fetcher.DMAG
   gmprocess.io.cosmos.cesmd_fetcher.MAX_STATIONS
   gmprocess.io.cosmos.cesmd_fetcher.STATION_TYPE
   gmprocess.io.cosmos.cesmd_fetcher.PROCESS_TYPE
   gmprocess.io.cosmos.cesmd_fetcher.URL_ERROR_CODE
   gmprocess.io.cosmos.cesmd_fetcher.TIMEFMT


.. py:data:: STATION_RADIUS
   :annotation: = 100

   

.. py:data:: EQ_RADIUS
   :annotation: = 10

   

.. py:data:: EQ_DT
   :annotation: = 10

   

.. py:data:: DDEPTH
   :annotation: = 30

   

.. py:data:: DMAG
   :annotation: = 0.3

   

.. py:data:: MAX_STATIONS
   :annotation: = 200

   

.. py:data:: STATION_TYPE
   :annotation: = Ground

   

.. py:data:: PROCESS_TYPE
   :annotation: = raw

   

.. py:data:: URL_ERROR_CODE
   :annotation: = 200

   

.. py:data:: TIMEFMT
   :annotation: = %Y-%m-%d %H:%M:%S

   

.. py:class:: CESMDFetcher(time, lat, lon, depth, magnitude, email=None, process_type='raw', station_type='Ground', eq_radius=None, eq_dt=None, station_radius=None, rawdir=None, config=None, drop_non_free=True, stream_collection=True)

   Bases: :py:obj:`gmprocess.io.fetcher.DataFetcher`

   .. py:method:: getMatchingEvents(self, solve=True)

      Return a list of dictionaries matching input parameters.

      :param solve: If set to True, then this method
                    should return a list with a maximum of one event.
      :type solve: bool

      :returns:

                List of event dictionaries, with fields:
                      - time Event time (UTC)
                      - lat Event latitude
                      - lon Event longitude
                      - depth Event depth
                      - mag Event magnitude
      :rtype: list


   .. py:method:: retrieveData(self, event_dict)

      Retrieve data from NIED, turn into StreamCollection.

      :param event: Best dictionary matching input event, fields as above
                    in return of getMatchingEvents().
      :type event: dict

      :returns: StreamCollection object.
      :rtype: StreamCollection



