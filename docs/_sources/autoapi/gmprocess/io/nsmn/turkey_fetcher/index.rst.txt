:py:mod:`gmprocess.io.nsmn.turkey_fetcher`
==========================================

.. py:module:: gmprocess.io.nsmn.turkey_fetcher


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.io.nsmn.turkey_fetcher.TurkeyFetcher



Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.io.nsmn.turkey_fetcher.get_turkey_dataframe



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.io.nsmn.turkey_fetcher.SEARCH_URL
   gmprocess.io.nsmn.turkey_fetcher.EQ_FORM_DATA
   gmprocess.io.nsmn.turkey_fetcher.TIMEFMT
   gmprocess.io.nsmn.turkey_fetcher.RADIUS
   gmprocess.io.nsmn.turkey_fetcher.DT
   gmprocess.io.nsmn.turkey_fetcher.DDEPTH
   gmprocess.io.nsmn.turkey_fetcher.DMAG


.. py:data:: SEARCH_URL
   :annotation: = http://kyhdata.deprem.gov.tr/2K/kyhdata_v4.php?dst=TU9EVUxFX05BTUU9ZWFydGhxdWFrZSZNT0RVTEVfVEFTSz...

   

.. py:data:: EQ_FORM_DATA
   

   

.. py:data:: TIMEFMT
   :annotation: = %Y-%m-%dT%H:%M:%S

   

.. py:data:: RADIUS
   :annotation: = 100

   

.. py:data:: DT
   :annotation: = 16

   

.. py:data:: DDEPTH
   :annotation: = 30

   

.. py:data:: DMAG
   :annotation: = 0.3

   

.. py:class:: TurkeyFetcher(time, lat, lon, depth, magnitude, user=None, password=None, radius=100, dt=16, ddepth=30, dmag=0.3, rawdir=None, config=None, drop_non_free=True)

   Bases: :py:obj:`gmprocess.io.fetcher.DataFetcher`

   .. py:method:: getMatchingEvents(self, solve=True)

      Return a list of dictionaries matching input parameters.

      :param solve: If set to True, then this method
                    should return a list with a maximum of one event.
      :type solve: bool

      :returns:

                List of event dictionaries, with fields:
                      - time Event time (UTC)
                      - lat Event latitude
                      - lon Event longitude
                      - depth Event depth
                      - mag Event magnitude
      :rtype: list


   .. py:method:: retrieveData(self, event_dict)

      Retrieve data from NSMN, turn into StreamCollection.

      :param event: Best dictionary matching input event, fields as above
                    in return of getMatchingEvents().
      :type event: dict

      :returns: StreamCollection object.
      :rtype: StreamCollection



.. py:function:: get_turkey_dataframe(time, dt)

   Retrieve a dataframe of events from the NSMN site.

   :param time: Earthquake origin time.
   :type time: datetime
   :param dt: Number of days around origin time to search.
   :type dt: int

   :returns:

             Catalog of events with columns:
                 - id Turkish Earthquake ID.
                 - url URL where station data for this event can be downloaded.
                 - origintime Earthquake origin time.
                 - latitude Earthquake origin latitude.
                 - longitude Earthquake origin longitude.
                 - depth Earthquake origin depth.
                 - magnitude Largest Turkish magnitude (from list of ML, MD, MS,
                   MW, MB)
             or None if no events are found.
   :rtype: DataFrame


