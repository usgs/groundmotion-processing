:py:mod:`gmprocess.io.geonet.geonet_fetcher`
============================================

.. py:module:: gmprocess.io.geonet.geonet_fetcher


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.io.geonet.geonet_fetcher.GeoNetFetcher



Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.io.geonet.geonet_fetcher._match_closest_time



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.io.geonet.geonet_fetcher.CATBASE
   gmprocess.io.geonet.geonet_fetcher.GEOBASE
   gmprocess.io.geonet.geonet_fetcher.TIMEFMT
   gmprocess.io.geonet.geonet_fetcher.NZTIMEDELTA
   gmprocess.io.geonet.geonet_fetcher.NZCATWINDOW
   gmprocess.io.geonet.geonet_fetcher.KM2DEG
   gmprocess.io.geonet.geonet_fetcher.RADIUS
   gmprocess.io.geonet.geonet_fetcher.DT
   gmprocess.io.geonet.geonet_fetcher.DDEPTH
   gmprocess.io.geonet.geonet_fetcher.DMAG


.. py:data:: CATBASE
   :annotation: = https://quakesearch.geonet.org.nz/csv?bbox=163.95996,-49.18170,182.63672,-32.28713&startdate=%s&e...

   

.. py:data:: GEOBASE
   :annotation: = ftp://ftp.geonet.org.nz/strong/processed/[YEAR]/[MONTH]/

   

.. py:data:: TIMEFMT
   :annotation: = %Y-%m-%dT%H:%M:%S

   

.. py:data:: NZTIMEDELTA
   :annotation: = 2

   

.. py:data:: NZCATWINDOW
   

   

.. py:data:: KM2DEG
   

   

.. py:data:: RADIUS
   :annotation: = 100

   

.. py:data:: DT
   :annotation: = 16

   

.. py:data:: DDEPTH
   :annotation: = 30

   

.. py:data:: DMAG
   :annotation: = 0.3

   

.. py:class:: GeoNetFetcher(time, lat, lon, depth, magnitude, user=None, password=None, radius=None, dt=None, ddepth=None, dmag=None, rawdir=None, config=None, drop_non_free=True, stream_collection=True)

   Bases: :py:obj:`object`

   .. py:method:: getMatchingEvents(self, solve=True)

      Return a list of dictionaries matching input parameters.

      :param solve: If set to True, then this method
                    should return a list with a maximum of one event.
      :type solve: bool

      :returns:

                List of event dictionaries, with fields:
                      - time Event time (UTC)
                      - lat Event latitude
                      - lon Event longitude
                      - depth Event depth
                      - mag Event magnitude
      :rtype: list


   .. py:method:: retrieveData(self, event_dict)

      Retrieve data from GeoNet FTP, turn into StreamCollection.

      :param event: Best dictionary matching input event, fields as above
                    in return of getMatchingEvents().
      :type event: dict

      :returns: StreamCollection object.
      :rtype: StreamCollection



.. py:function:: _match_closest_time(etime, dirlist)


