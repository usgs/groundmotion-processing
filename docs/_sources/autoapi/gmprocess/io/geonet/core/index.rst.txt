:py:mod:`gmprocess.io.geonet.core`
==================================

.. py:module:: gmprocess.io.geonet.core


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.io.geonet.core.is_geonet
   gmprocess.io.geonet.core.read_geonet
   gmprocess.io.geonet.core._read_channel
   gmprocess.io.geonet.core._read_header
   gmprocess.io.geonet.core._get_channel
   gmprocess.io.geonet.core._dms_to_dd



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.io.geonet.core.NZCATWINDOW
   gmprocess.io.geonet.core.TEXT_HDR_ROWS
   gmprocess.io.geonet.core.FP_HDR_ROWS
   gmprocess.io.geonet.core.MMPS_TO_CMPS
   gmprocess.io.geonet.core.COLS_PER_ROW
   gmprocess.io.geonet.core.ANGLES


.. py:data:: NZCATWINDOW
   

   

.. py:data:: TEXT_HDR_ROWS
   :annotation: = 16

   

.. py:data:: FP_HDR_ROWS
   :annotation: = 10

   

.. py:data:: MMPS_TO_CMPS
   

   

.. py:data:: COLS_PER_ROW
   :annotation: = 10

   

.. py:data:: ANGLES
   

   

.. py:function:: is_geonet(filename, config=None)

   Check to see if file is a New Zealand GNS V1 or V2 strong motion file.

   :param filename: Path to possible GNS V1/V2 data file.
   :type filename: str
   :param config: Dictionary containing configuration.
   :type config: dict

   :returns: True if GNS V1/V2, False otherwise.
   :rtype: bool


.. py:function:: read_geonet(filename, config=None, **kwargs)

   Read New Zealand GNS V1/V2 strong motion file.

   There is one extra key in the Stats object for each Trace -
   "process_level".
   This will be set to either "V1" or "V2".

   :param filename: Path to possible GNS V1/V2 data file.
   :type filename: str
   :param config: Dictionary containing configuration.
   :type config: dict
   :param kwargs: Other arguments will be ignored.
   :type kwargs: ref

   :returns: Obspy Stream containing three channels of acceleration data
             (cm/s**2).
   :rtype: Stream


.. py:function:: _read_channel(filename, line_offset)

   Read channel data from GNS V1 text file.

   :param filename: Input GNS V1 filename.
   :type filename: str
   :param line_offset: Line offset to beginning of channel text block.
   :type line_offset: int

   :returns: (obspy Trace, int line offset)
   :rtype: tuple


.. py:function:: _read_header(hdr_data, station, name, component, data_format, instrument, resolution)

   Construct stats dictionary from header lines.

   :param hdr_data: (10,10) numpy array containing header data.
   :type hdr_data: ndarray
   :param station: Station code obtained from previous text portion of header.
   :type station: str
   :param location: Location string obtained from previous text portion of header.
   :type location: str
   :param component: Component direction (N18E, S72W, etc.)
   :type component: str

   :returns:     - network "NZ"
                 - station
                 - channel H1,H2,or Z.
                 - location
                 - sampling_rate Samples per second.
                 - delta Interval between samples (seconds)
                 - calib Calibration factor (always 1.0)
                 - npts Number of samples in record.
                 - starttime Datetime object containing start of record.
                 - standard:
                   - station_name
                   - units "acc"
                   - source 'New Zealand Institute of Geological and Nuclear
                     Science'
                   - horizontal_orientation
                   - instrument_period
                   - instrument_damping
                   - processing_time
                   - process_level
                   - sensor_serial_number
                   - instrument
                   - comments
                   - structure_type
                   - corner_frequency
                   - source_format
                 - coordinates:
                   - lat Latitude of station.
                   - lon Longitude of station.
                   - elevation Elevation of station.
                 - format_specific:
                   - sensor_bit_resolution
   :rtype: Dictionary containing fields


.. py:function:: _get_channel(component)

   Determine channel name string from component string.

   :param component: String like "N28E".
   :type component: str

   :returns: Channel (H1,H2,Z)
   :rtype: str


.. py:function:: _dms_to_dd(degrees, minutes, seconds)


