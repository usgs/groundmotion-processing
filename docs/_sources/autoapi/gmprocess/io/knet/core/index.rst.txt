:py:mod:`gmprocess.io.knet.core`
================================

.. py:module:: gmprocess.io.knet.core


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.io.knet.core.is_knet
   gmprocess.io.knet.core.read_knet



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.io.knet.core.TEXT_HDR_ROWS
   gmprocess.io.knet.core.TIMEFMT
   gmprocess.io.knet.core.COLS_PER_LINE
   gmprocess.io.knet.core.HDR1
   gmprocess.io.knet.core.HDR2
   gmprocess.io.knet.core.SRC


.. py:data:: TEXT_HDR_ROWS
   :annotation: = 17

   

.. py:data:: TIMEFMT
   :annotation: = %Y/%m/%d %H:%M:%S

   

.. py:data:: COLS_PER_LINE
   :annotation: = 8

   

.. py:data:: HDR1
   :annotation: = Origin Time

   

.. py:data:: HDR2
   :annotation: = Station Code

   

.. py:data:: SRC
   :annotation: = Japan National Research Institute for Earth Science and Disaster Resilience

   

.. py:function:: is_knet(filename, config=None)

   Check to see if file is a Japanese NIED/KNET strong motion file.

   :param filename: Path to possible NIED/KNET data file.
   :type filename: str
   :param config: Dictionary containing configuration.
   :type config: dict

   :returns: True if NIED/KNET, False otherwise.
   :rtype: bool


.. py:function:: read_knet(filename, config=None, **kwargs)

   Read Japanese KNET strong motion file.

   :param filename: Path to possible KNET data file.
   :type filename: str
   :param config: Dictionary containing configuration.
   :type config: dict
   :param kwargs: Other arguments will be ignored.
   :type kwargs: ref

   :returns:

             Obspy Stream containing three channels of acceleration data
                 (cm/s**2).
   :rtype: Stream


