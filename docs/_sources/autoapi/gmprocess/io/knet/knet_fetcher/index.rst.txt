:py:mod:`gmprocess.io.knet.knet_fetcher`
========================================

.. py:module:: gmprocess.io.knet.knet_fetcher


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gmprocess.io.knet.knet_fetcher.KNETFetcher




Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.io.knet.knet_fetcher.JST_OFFSET
   gmprocess.io.knet.knet_fetcher.SEARCH_URL
   gmprocess.io.knet.knet_fetcher.RETRIEVE_URL
   gmprocess.io.knet.knet_fetcher.CGIPARAMS
   gmprocess.io.knet.knet_fetcher.QUARTERS
   gmprocess.io.knet.knet_fetcher.TIMEPAT
   gmprocess.io.knet.knet_fetcher.LATPAT
   gmprocess.io.knet.knet_fetcher.LONPAT
   gmprocess.io.knet.knet_fetcher.DEPPAT
   gmprocess.io.knet.knet_fetcher.MAGPAT
   gmprocess.io.knet.knet_fetcher.TIMEFMT
   gmprocess.io.knet.knet_fetcher.RADIUS
   gmprocess.io.knet.knet_fetcher.DT
   gmprocess.io.knet.knet_fetcher.DDEPTH
   gmprocess.io.knet.knet_fetcher.DMAG
   gmprocess.io.knet.knet_fetcher.URL_ERROR_CODE
   gmprocess.io.knet.knet_fetcher.MAGS


.. py:data:: JST_OFFSET
   

   

.. py:data:: SEARCH_URL
   :annotation: = http://www.kyoshin.bosai.go.jp/cgi-bin/kyoshin/quick/list_eqid_en.cgi?1+YEAR+QUARTER

   

.. py:data:: RETRIEVE_URL
   :annotation: = http://www.kyoshin.bosai.go.jp/cgi-bin/kyoshin/auth/makearc

   

.. py:data:: CGIPARAMS
   

   

.. py:data:: QUARTERS
   

   

.. py:data:: TIMEPAT
   :annotation: = [0-9]{4}/[0-9]{2}/[0-9]{2}-[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{2}

   

.. py:data:: LATPAT
   :annotation: = [0-9]{2}\.[0-9]{2}N

   

.. py:data:: LONPAT
   :annotation: = [0-9]{3}\.[0-9]{2}E

   

.. py:data:: DEPPAT
   :annotation: = [0-9]{3}km

   

.. py:data:: MAGPAT
   :annotation: = M[0-9]{1}\.[0-9]{1}

   

.. py:data:: TIMEFMT
   :annotation: = %Y/%m/%d-%H:%M:%S.%f

   

.. py:data:: RADIUS
   :annotation: = 100

   

.. py:data:: DT
   :annotation: = 60

   

.. py:data:: DDEPTH
   :annotation: = 30

   

.. py:data:: DMAG
   :annotation: = 0.3

   

.. py:data:: URL_ERROR_CODE
   :annotation: = 200

   

.. py:data:: MAGS
   

   

.. py:class:: KNETFetcher(time, lat, lon, depth, magnitude, user=None, password=None, radius=None, dt=None, ddepth=None, dmag=None, rawdir=None, config=None, drop_non_free=True, stream_collection=True)

   Bases: :py:obj:`gmprocess.io.fetcher.DataFetcher`

   .. py:method:: getMatchingEvents(self, solve=True)

      Return a list of dictionaries matching input parameters.

      :param solve: If set to True, then this method
                    should return a list with a maximum of one event.
      :type solve: bool

      :returns:

                List of event dictionaries, with fields:
                      - time Event time (UTC)
                      - lat Event latitude
                      - lon Event longitude
                      - depth Event depth
                      - mag Event magnitude
      :rtype: list


   .. py:method:: retrieveData(self, event_dict)

      Retrieve data from NIED, turn into StreamCollection.

      :param event: Best dictionary matching input event, fields as above
                    in return of getMatchingEvents().
      :type event: dict

      :returns: StreamCollection object.
      :rtype: StreamCollection



