:py:mod:`gmprocess.io.dmg.core`
===============================

.. py:module:: gmprocess.io.dmg.core


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.io.dmg.core._get_date
   gmprocess.io.dmg.core._get_time
   gmprocess.io.dmg.core.is_dmg
   gmprocess.io.dmg.core.read_dmg
   gmprocess.io.dmg.core._read_volume_one
   gmprocess.io.dmg.core._read_volume_two
   gmprocess.io.dmg.core._get_header_info_v1
   gmprocess.io.dmg.core._get_header_info
   gmprocess.io.dmg.core._get_coords
   gmprocess.io.dmg.core._get_channel
   gmprocess.io.dmg.core._read_lines
   gmprocess.io.dmg.core._get_data_format
   gmprocess.io.dmg.core._get_units



Attributes
~~~~~~~~~~

.. autoapisummary::

   gmprocess.io.dmg.core.V1_TEXT_HDR_ROWS
   gmprocess.io.dmg.core.V1_INT_HDR_ROWS
   gmprocess.io.dmg.core.V1_REAL_HDR_ROWS
   gmprocess.io.dmg.core.V2_TEXT_HDR_ROWS
   gmprocess.io.dmg.core.V2_INT_HDR_ROWS
   gmprocess.io.dmg.core.V2_INT_FMT
   gmprocess.io.dmg.core.V2_REAL_HDR_ROWS
   gmprocess.io.dmg.core.V2_REAL_FMT
   gmprocess.io.dmg.core.V1_MARKER
   gmprocess.io.dmg.core.V2_MARKER
   gmprocess.io.dmg.core.V3_MARKER
   gmprocess.io.dmg.core.DATE_PATTERNS
   gmprocess.io.dmg.core.TIME_MATCH
   gmprocess.io.dmg.core.code_file
   gmprocess.io.dmg.core.CODES
   gmprocess.io.dmg.core.UNITS


.. py:data:: V1_TEXT_HDR_ROWS
   :annotation: = 13

   

.. py:data:: V1_INT_HDR_ROWS
   :annotation: = 7

   

.. py:data:: V1_REAL_HDR_ROWS
   :annotation: = 7

   

.. py:data:: V2_TEXT_HDR_ROWS
   :annotation: = 25

   

.. py:data:: V2_INT_HDR_ROWS
   :annotation: = 7

   

.. py:data:: V2_INT_FMT
   

   

.. py:data:: V2_REAL_HDR_ROWS
   :annotation: = 13

   

.. py:data:: V2_REAL_FMT
   

   

.. py:data:: V1_MARKER
   :annotation: = UNCORRECTED ACCELEROGRAM DATA

   

.. py:data:: V2_MARKER
   :annotation: = CORRECTED ACCELEROGRAM

   

.. py:data:: V3_MARKER
   :annotation: = RESPONSE AND FOURIER AMPLITUDE SPECTRA

   

.. py:data:: DATE_PATTERNS
   :annotation: = ['[0-9]{2}/[0-9]{2}/[0-9]{2}', '[0-9]{2}/[0-9]{1}/[0-9]{2}', '[0-9]{1}/[0-9]{2}/[0-9]{2}',...

   

.. py:data:: TIME_MATCH
   :annotation: = [0-9]{2}:[0-9]{2}:..\.[0-9]{1}

   

.. py:data:: code_file
   

   

.. py:data:: CODES
   

   

.. py:data:: UNITS
   :annotation: = ['acc', 'vel', 'disp']

   

.. py:function:: _get_date(line)

   Parse a datetime object with month/day/year info found from string.


.. py:function:: _get_time(line)

   Parse a timdelta object with hour, minute, fractional second info found
   from string.


.. py:function:: is_dmg(filename, config=None)

   Check to see if file is a DMG strong motion file.

   .. rubric:: Notes

   CSMIP is synonymous to as DMG in this reader.

   :param filename: Path to possible DMG data file.
   :type filename: str
   :param config: Dictionary containing configuration.
   :type config: dict

   :returns: True if DMG , False otherwise.
   :rtype: bool


.. py:function:: read_dmg(filename, config=None, **kwargs)

   Read DMG strong motion file.

   .. rubric:: Notes

   CSMIP is synonymous to as DMG in this reader.

   :param filename: Path to possible DMG data file.
   :type filename: str
   :param config: Dictionary containing configuration.
   :type config: dict
   :param kwargs:
                  units (str): String determining which timeseries is return. Valid
                          options include 'acc', 'vel', 'disp'. Default is 'acc'.
                  Other arguments will be ignored.
   :type kwargs: ref

   :returns: Obspy Stream containing three channels of acceleration data
             (cm/s**2).
   :rtype: Stream


.. py:function:: _read_volume_one(filename, line_offset, location='', units='acc')

   Read channel data from DMG Volume 1 text file.

   :param filename: Input DMG V1 filename.
   :type filename: str
   :param line_offset: Line offset to beginning of channel text block.
   :type line_offset: int
   :param units: units to get.
   :type units: str

   :returns: (list of obspy Trace, int line offset)
   :rtype: tuple


.. py:function:: _read_volume_two(filename, line_offset, location='', units='acc')

   Read channel data from DMG text file.

   :param filename: Input DMG V2 filename.
   :type filename: str
   :param line_offset: Line offset to beginning of channel text block.
   :type line_offset: int
   :param units: Units to get.
   :type units: str

   :returns: (list of obspy Trace, int line offset)
   :rtype: tuple


.. py:function:: _get_header_info_v1(int_data, flt_data, lines, level, location='')

   Return stats structure from various V1 headers.

   Output is a dictionary like this:
    - network (str): Default is '--'. Determined using COSMOS_NETWORKS
    - station (str)
    - channel (str)
    - location (str): Default is '--'
    - starttime (datetime)
    - sampling_rate (float)
    - delta (float)
    - coordinates:
      - latitude (float)
      - longitude (float)
      - elevation (float): Default is np.nan
   - standard (Defaults are either np.nan or '')
     - horizontal_orientation (float): Rotation from north (degrees)
     - instrument_period (float): Period of sensor (Hz)
     - instrument_damping (float): Fraction of critical
     - process_time (datetime): Reported date of processing
     - process_level: Either 'V0', 'V1', 'V2', or 'V3'
     - station_name (str): Long form station description
     - sensor_serial_number (str): Reported sensor serial
     - instrument (str)
     - comments (str): Processing comments
     - structure_type (str)
     - corner_frequency (float): Sensor corner frequency (Hz)
     - units (str)
     - source (str): Network source description
     - source_format (str): Always dmg
   - format_specific
     - sensor_sensitivity (float): Transducer sensitivity (cm/g)
     - time_sd (float): Standard deviaiton of time steop (millisecond)
     - fractional_unit (float): Units of digitized acceleration
           in file (fractions of g)
     - scaling_factor (float): Scaling used for converting acceleration
           from g/10 to cm/sec/sec
     - low_filter_corner (float): Filter corner for low frequency
           V2 filtering (Hz)
     - high_filter_corner (float): Filter corner for high frequency
           V2 filtering (Hz)

   :param int_data: Array of integer data
   :type int_data: ndarray
   :param flt_data: Array of float data
   :type flt_data: ndarray
   :param lines: List of text headers (str)
   :type lines: list
   :param level: Process level code (V0, V1, V2, V3)
   :type level: str

   :returns: Dictionary of header/metadata information
   :rtype: dictionary


.. py:function:: _get_header_info(int_data, flt_data, lines, level, location='')

   Return stats structure from various headers.

   Output is a dictionary like this:
    - network (str): Default is '--' (unknown). Determined using
      COSMOS_NETWORKS
    - station (str)
    - channel (str)
    - location (str): Default is '--'
    - starttime (datetime)
    - sampling_rate (float)
    - delta (float)
    - coordinates:
      - latitude (float)
      - longitude (float)
      - elevation (float): Default is np.nan
   - standard (Defaults are either np.nan or '')
     - horizontal_orientation (float): Rotation from north (degrees)
     - instrument_period (float): Period of sensor (Hz)
     - instrument_damping (float): Fraction of critical
     - process_time (datetime): Reported date of processing
     - process_level: Either 'V0', 'V1', 'V2', or 'V3'
     - station_name (str): Long form station description
     - sensor_serial_number (str): Reported sensor serial
     - instrument (str)
     - comments (str): Processing comments
     - structure_type (str)
     - corner_frequency (float): Sensor corner frequency (Hz)
     - units (str)
     - source (str): Network source description
     - source_format (str): Always dmg
   - format_specific
     - sensor_sensitivity (float): Transducer sensitivity (cm/g)
     - time_sd (float): Standard deviaiton of time steop (millisecond)
     - fractional_unit (float): Units of digitized acceleration
           in file (fractions of g)
     - scaling_factor (float): Scaling used for converting acceleration
           from g/10 to cm/sec/sec
     - low_filter_corner (float): Filter corner for low frequency
           V2 filtering (Hz)
     - high_filter_corner (float): Filter corner for high frequency
           V2 filtering (Hz)

   :param int_data: Array of integer data
   :type int_data: ndarray
   :param flt_data: Array of float data
   :type flt_data: ndarray
   :param lines: List of text headers (str)
   :type lines: list
   :param level: Process level code (V0, V1, V2, V3)
   :type level: str

   :returns: Dictionary of header/metadata information
   :rtype: dictionary


.. py:function:: _get_coords(latitude_str, longitude_str)


.. py:function:: _get_channel(angle, sampling_rate)


.. py:function:: _read_lines(skip_rows, max_rows, widths, filename)

   Read lines of headers and.

   :param skip_rows: Number of rows to skip.
   :type skip_rows: int
   :param filename: Path to possible DMG data file.
   :type filename: str

   :returns: List of comments or array of data.
   :rtype: array-like


.. py:function:: _get_data_format(filename, skip_rows, npts)

   Read data header and return the format.

   :param skip_rows: Number of rows to skip.
   :type skip_rows: int
   :param filename: Path to possible DMG data file.
   :type filename: str
   :param npts: Number of data points.
   :type npts: int

   :returns: (int number of rows, list list of widths).
   :rtype: tuple


.. py:function:: _get_units(line)

   Parse units from a text line.

   :param line: text line which should contain units.
   :type line: str


