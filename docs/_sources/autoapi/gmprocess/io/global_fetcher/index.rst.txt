:py:mod:`gmprocess.io.global_fetcher`
=====================================

.. py:module:: gmprocess.io.global_fetcher


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   gmprocess.io.global_fetcher.fetch_data
   gmprocess.io.global_fetcher.find_fetchers



.. py:function:: fetch_data(time, lat, lon, depth, magnitude, config=None, rawdir=None, drop_non_free=True, stream_collection=True)

   Retrieve data using any DataFetcher subclass.

   :param time: Origin time.
   :type time: datetime
   :param lat: Origin latitude.
   :type lat: float
   :param lon: Origin longitude.
   :type lon: float
   :param depth: Origin depth.
   :type depth: float
   :param magnitude: Origin magnitude.
   :type magnitude: float
   :param radius: Search radius (km).
   :type radius: float
   :param dt: Search time window (sec).
   :type dt: float
   :param ddepth: Search depth window (km).
   :type ddepth: float
   :param dmag: Search magnitude window (magnitude units).
   :type dmag: float
   :param rawdir: Path to location where raw data will be stored. If not specified,
                  raw data will be deleted.
   :type rawdir: str
   :param drop_non_free: Option to ignore non-free-field (borehole, sensors on structures,
                         etc.)
   :type drop_non_free: bool
   :param stream_collection: Construct and return a StreamCollection instance?
   :type stream_collection: bool

    Returns:
       StreamCollection: StreamCollection object.


.. py:function:: find_fetchers(lat, lon)

   Create a dictionary of classname:class to be used in main().

   :param lat: Origin latitude.
   :type lat: float
   :param lon: Origin longitude.
   :type lon: float

   :returns:

             Dictionary of classname:class where each class
                 is a subclass of shakemap.coremods.base.CoreModule.
   :rtype: dict


