:py:mod:`clipping_ann`
======================

.. py:module:: clipping_ann

.. autoapi-nested-parse::

   Module for implementing the Artificial Neural Net model for clipping, as
   developed by Kleckner et al. This code is based on Xavier Bellagamba's python
   NN implementation of "A neural network for automated quality screening of
   ground motion records from small magnitude earthquakes"
   DOI: 10.1193/122118EQS292M



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   clipping_ann.clipNet



Functions
~~~~~~~~~

.. autoapisummary::

   clipping_ann.loadCSV
   clipping_ann.sigmoid
   clipping_ann.tanh
   clipping_ann.relu
   clipping_ann.isNumber



Attributes
~~~~~~~~~~

.. autoapisummary::

   clipping_ann.NN_PATH
   clipping_ann.NN_PATH


.. py:data:: NN_PATH
   

   

.. py:data:: NN_PATH
   

   

.. py:class:: clipNet

   Class allowing the instantiation and use of simple (1 or 2 layers)
   neural networks

   .. py:method:: evaluate(self, v_input)

      Use a populated neural network (i.e. from the input, returns the
      classification score or the regression result).

      :param v_input: Values to correspond to the following paramters: mag, dist, 6M
                      amplitude check, histogram check, ping check.
      :type v_input: list or np.array

      :returns: numpy array containing the results.
      :rtype: np.array



.. py:function:: loadCSV(data_path, row_ignore=0, col_ignore=0)

   Load csv files from a given path and returns a list of list.
   For all imported data, check if is a number. If so, returns a
   float. If not, returns a string.

   :param data_path: path to the csv to load.
   :type data_path: string
   :param row_ignore: number of rows to ignore.
   :type row_ignore: int
   :param col_ignore: number of columns to ignore.
   :type col_ignore: int

   :returns: containing the data from the csv
   :rtype: list of list


.. py:function:: sigmoid(v_input)

   Performs a sigmoid operation on the input (1/(e(-x)+1))

   :param v_input: a number defined on R (real).
   :type v_input: float

   :returns: sigmoid result (a number between 0 and 1).
   :rtype: float


.. py:function:: tanh(v_input)

   Performs a hyperbolic tangent operation on the input (2/(e(2x)+1))

   :param v_input: a number defined on R (real).
   :type v_input: float

   :returns: tanh result (a number between -1 and 1).
   :rtype: float


.. py:function:: relu(v_input)

   Performs a hyperbolic tangent operation on the input (2/(e(2x)+1))

   :param v_input: a number defined on R (real).
   :type v_input: float

   :returns: tanh result (a number between -1 and 1).
   :rtype: float


.. py:function:: isNumber(s)

   Check if given input is a number.

   :param s: Data to test.
   :type s: any type

   :returns: True if is a number, False if isn't
   :rtype: bool


